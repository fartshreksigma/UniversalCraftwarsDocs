"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4843],{82597:e=>{e.exports=JSON.parse('{"functions":[{"name":"GetProfileStore","desc":"","params":[{"name":"profile_store_index","desc":"The name of the profile store","lua_type":"string | profile_store_index_table"},{"name":"profile_template","desc":"The template used when the player has no previous data","lua_type":"DataTemplate"}],"returns":[{"desc":"The profile store with the given Name and Scope","lua_type":"ProfileStore"}],"function_type":"static","source":{"line":84,"path":"src/ProfileService.lua"}}],"properties":[{"name":"ServiceLocked","desc":"A read-only property which indicates if the server is shutting down, if it is [ProfileStore](/api/ProfileStore) methods shouldnt be used anymore.","lua_type":"boolean","readonly":true,"source":{"line":28,"path":"src/ProfileService.lua"}},{"name":"IssueSignal","desc":"An analytics endpoint for error logging. This uses a scripted implementation of an RBXScriptSignal, so not all methods may be available.\\n```lua\\n-- Example:\\nProfileService.IssueSignal:Connect(function(error_message, profile_store_name, profile_key)\\n    pcall(function()\\n        AnalyticsService:FireEvent(\\n            \\"ProfileServiceIssue\\",\\n            error_message,\\n            profile_store_name,\\n            profile_key\\n        )\\n    end)\\nend)\\n```\\n:::info\\nThe RBXScriptSignal parses a string representing the error message, a string for the profile store name, and lastly a string for the profile key.\\n:::","lua_type":"RBXScriptSignal","readonly":true,"source":{"line":52,"path":"src/ProfileService.lua"}},{"name":"CorruptionSignal","desc":"An analytics endpoint for when a DataStore key returns invalid profile compontents. This uses a scripted implementation of an RBXScriptSignal, so not all methods may be available.\\n:::info\\nThe RBXScriptSignal parses a string representing the profile store name, and a string for the profile key.\\n:::","lua_type":"RBXScriptSignal","readonly":true,"source":{"line":63,"path":"src/ProfileService.lua"}},{"name":"CriticalStateSignal","desc":"An analytics endpoint for when too many errors are thrown, and it is likely affecting the game. This uses a scripted implementation of an RBXScriptSignal, so not all methods may be available.\\n:::info\\nThe RBXScriptSignal parses a boolean for if it is a critical state or not.\\n:::","lua_type":"RBXScriptSignal","readonly":true,"source":{"line":74,"path":"src/ProfileService.lua"}}],"types":[{"name":"profile_store_index_table","desc":"A table specifying a DataStore name, and an optional scope","fields":[{"name":"Name","lua_type":"string","desc":"The name of the DataStore, required"},{"name":"Scope","lua_type":"string?","desc":"The scope used to search, optional, defaults to global"}],"source":{"line":20,"path":"src/ProfileService.lua"}}],"name":"ProfileService","desc":"A useful datastore wrapper which allows for things such as session locking and global updates.\\n [Download](https://create.roblox.com/store/asset/5331689994/ProfileService?externalSource=www) and [API](https://madstudioroblox.github.io/ProfileService/api/) links are available here.\\n Please note that most of the content in these pages is paraphrased from the afforementioned API page, check that out for a more in-depth look.\\n This is also a library which I didn\'t make, it simply has its own category due to having multiple components.","source":{"line":11,"path":"src/ProfileService.lua"}}')}}]);