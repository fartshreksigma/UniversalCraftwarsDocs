"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5380],{10007:e=>{e.exports=JSON.parse('{"functions":[{"name":"LoadProfileAsync","desc":"```lua\\nlocal Profile = ProfileStore:LoadProfileAsync(\\n    \\"Player_2312310\\",\\n    function(place_id, game_job_id)\\n      -- place_id and game_job_id identify the Roblox server that has\\n      -- this profile currently locked. In rare cases, if the server\\n      -- crashes, the profile will stay locked until ForceLoaded by\\n      -- a new session.\\n      return \\"Repeat\\" or \\"Cancel\\" or \\"ForceLoad\\" or \\"Steal\\"\\n    end\\n  )\\n```\\n:::info\\n[ProfileService](/api/ProfileService) saves [profiles](/api/Profile) to live [DataStore](https://create.roblox.com/docs/cloud-services/data-stores)\\n keys in [Roblox Studio](https://create.roblox.com/docs/studio)\\n when [Roblox API services are enabled](https://create.roblox.com/docs/cloud-services/data-stores#enabling-studio-access). See [```ProfileStore.Mock```](#Mock) if saving to live keys during testing is not desired.\\n:::\\n:::caution\\n```:LoadProfileAsync()``` can return ```nil``` when another remote Roblox server attempts to load the profile at the same time.\\n This case should be extremely rare and it wouldn\'t be recommended to [```:Kick()```](https://create.roblox.com/docs/reference/engine/classes/Player#Kick)\\n the player if ```:LoadProfileAsync()``` doesn\'t return a [Profile](/api/Profile).\\n:::\\n:::warning\\nTrying to load a [profile](/api/Profile) that has already been session-locked on the same server will result in an error. You may, \\nhowever, instantly load the profile again after releasing it with [```Profile:Release()```](/api/Profile#Release).\\n:::","params":[{"name":"profile_key","desc":"The key for the profile, should be unique to the player if it is being loaded for a player","lua_type":"string"},{"name":"not_released_handler","desc":"The handler for if the profile is session locked","lua_type":"not_released_handler_function"}],"returns":[{"desc":"Returns the profile which has been loaded or nil if it was canceled in the not_released_handler.","lua_type":"Profile?"}],"function_type":"method","yields":true,"source":{"line":189,"path":"src/ProfileService.lua"}},{"name":"GlobalUpdateProfileAsync","desc":"Used to create and manage ```active``` global updates for profiles. It can be called on any Roblox server and updates can be expected within 30 seconds, regardless of whether it was called on the same server the profile is on or not.\\n Refer to [Global Updates](https://madstudioroblox.github.io/ProfileService/api/#global-updates) for more info.\\n\\n```lua\\n-- Example usage\\nProfileStore:GlobalUpdateProfileAsync(\\n    \\"Player_2312310\\",\\n    function(global_updates)\\n      global_updates:AddActiveUpdate({\\n        Type = \\"AdminGift\\",\\n        Item = \\"Coins\\",\\n        Amount = 1000,\\n      })\\n    end\\n  )\\n```\\n:::warning\\nAvoid rapid usage of this function as it can cause dead session locks and loss of data. Read [The Official Documentation](https://madstudioroblox.github.io/ProfileService/api/#profilestoreglobalupdateprofileasync)\\n for more info\\n:::","params":[{"name":"profile_key","desc":"The key used to identify the profile","lua_type":"string"},{"name":"update_handler","desc":"The global_update_handler used to update the Profile","lua_type":"global_update_handler"}],"returns":[{"desc":"Returns either a global_updates object or nil","lua_type":"global_updates?"}],"function_type":"method","yields":true,"source":{"line":221,"path":"src/ProfileService.lua"}},{"name":"ViewProfileAsync","desc":":::info\\nPassing ```version``` to a mock or offline profile will throw an error as Mock versioning isn\'t supported.\\n:::\\n\\nAttempts to load either the latest version of a profile or the specified version if one is passed without creating a session-lock. Returns ```nil``` if the specified version doesn\'t exist. The returned [```Profile```](/api/Profile)\\n won\'t auto-save, and releasing won\'t do anything. The data in the returned [```Profile```](/api/Profile) can be changed to create a payload for [```Profile:OverwriteAsync()```](/api/Profile#OverwriteAsync).\\n\\n```:ViewProfileAsync()``` is the prefered way of viewing profile data without editing it.","params":[{"name":"profile_key","desc":"The key used to identify the profile","lua_type":"string"},{"name":"version","desc":"The version to view, or nil for the current version","lua_type":"string?"}],"returns":[{"desc":"Returns either a profile or nil","lua_type":"Profile?"}],"function_type":"method","yields":true,"source":{"line":240,"path":"src/ProfileService.lua"}},{"name":"ProfileVersionQuery","desc":"Creates a ProfileVersionQuery for the specified profile, please refer to the [official documentation](https://madstudioroblox.github.io/ProfileService/api/#profilestoreprofileversionquery)\\n for a more indepth explanation of this function","params":[{"name":"profile_key","desc":"The key used to identify the profile","lua_type":"string"},{"name":"sort_direction","desc":"The sort direction to use, defaults to [Enum.SortDirection.Ascending](https://create.roblox.com/docs/reference/engine/enums/SortDirection)","lua_type":"SortDirection"},{"name":"min_date","desc":"The minimum date used, when number is provided it is assumed to be in milliseconds","lua_type":"DateTime? | number?"},{"name":"max_date","desc":"the maximum date used, when number is provided it is assumed to be in milliseconds","lua_type":"DateTime? | number?"}],"returns":[{"desc":"Returns a [profile version query](https://madstudioroblox.github.io/ProfileService/api/#profilestoreprofileversionquery) (I will not be documenting this myself)","lua_type":"ProfileVersionQuery"}],"function_type":"method","yields":true,"source":{"line":256,"path":"src/ProfileService.lua"}},{"name":"WipeProfileAsync","desc":"Use ```:WipeProfileASync()``` to erase user data when complying with right of erasure requests. In live roblox servers, ```:WipeProfileAsync()``` must be used on profiles created through\\n [```ProfileStore.Mock```](#Mock) after [```Profile:Release()```](/api/Profile/Release)\\n and it\'s known the Profile will no longer be loaded again.","params":[{"name":"profile_key","desc":"The key used to identify the profile","lua_type":"string"}],"returns":[{"desc":"Returns a boolean indicating whether the wipe was successful or not","lua_type":"boolean"}],"function_type":"method","yields":true,"source":{"line":270,"path":"src/ProfileService.lua"}}],"properties":[{"name":"Mock","desc":"```ProfileStore.Mock``` is a mock-copy of methods available within a ```ProfileStore```, with the exception that profile operations are performed on\\n \\"fake\\" DataStores, and are forgotten once the game ends. You may load profiles of the same key from ```ProfileStore``` and ```ProfileStore.Mock```\\n in parallel, as they will be two completely different profiles since regular and mock profile stores are completely isolated from each other.\\n\\n```ProfileStore.Mock``` is useful for customizing your testing environment in cases when you want to\\n [enable Roblox API services](https://create.roblox.com/docs/cloud-services/data-stores#enabling-studio-access) in studio, but\\n don\'t want ProfileService to save to live keys.\\n\\n```lua\\n-- Example\\nlocal RunService = game:GetService(\\"RunService\\")\\nlocal GameProfileStore = ProfileService.GetProfileStore(\\"PlayerData\\", ProfileTemplate)\\nif RunService:IsStudio() == true then\\n  GameProfileStore = GameProfileStore.Mock\\nend\\n```\\n\\nA few more things:\\n- Even when Roblox API services are disabled, ```ProfileStore``` and ```ProfileStore.Mock``` will store profiles in seperate locations.\\n- It\'s better to thing of ```ProfileStore``` and ```ProfileStore.Mock``` as two different ```ProfileStore``` instances unrelated to each other in any way.\\n- It\'s possible to create a project that utilizes both live and mock profiles on live servers!","lua_type":"ProfileStore","readonly":true,"source":{"line":151,"path":"src/ProfileService.lua"}}],"types":[{"name":"not_released_handler_function","desc":"A function used to determine what to do when a profile which was attempted to be loaded is session locked.\\n- ```Repeat``` will try load the profile again, potentially recalling this function.\\n- ```Cancel``` will return nil to the caller.\\n- ```ForceLoad``` will constantly try load the profile, if a session lock is present it will be released or stolen.\\n- ```Steal``` will load the profile regardless of the session lock, and can be used to clear dead session locks.\\n\\n:::caution\\nSteal should usually only be used when the server holding a session lock has been crashed.\\n:::","lua_type":"(place_id: number, game_job_id: number) -> (\\"Repeat\\", \\"Cancel\\", \\"ForceLoad\\", \\"Steal\\")","source":{"line":113,"path":"src/ProfileService.lua"}},{"name":"global_update_handler","desc":"A function used when globally updating a [profile](/api/Profile). It is passed a global_updates object, and is expected to add the update itself.\\n:::warning\\nYielding inside a global_update_handler will cause it to error.\\n:::","lua_type":"(global_updates) -> nil","source":{"line":123,"path":"src/ProfileService.lua"}}],"name":"ProfileStore","desc":"The ProfileService equivalent of a DataStore, allowing you to interact with [Profiles](/api/Profile) under the ProfileStore","source":{"line":98,"path":"src/ProfileService.lua"}}')}}]);