"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6583],{54284:e=>{e.exports=JSON.parse('{"functions":[{"name":"IsActive","desc":"Returns ```true``` while the profile is session-locked and saving of changes to [```Profile.Data```](#Data) is guarenteed.","params":[],"returns":[{"desc":"Whether the Profile is session-locked or not","lua_type":"boolean"}],"function_type":"method","source":{"line":366,"path":"src/ProfileService.lua"}},{"name":"GetMetaTag","desc":"Equivalent of ```Profile.MetaData.MetaTags[tag_name]```. See [```Profile:SetMetaTag()```](#SetMetaTag) for more info.","params":[{"name":"tag_name","desc":"The name of the tag to retrieve","lua_type":"string"}],"returns":[{"desc":"The value associated with the requested tag","lua_type":"any"}],"function_type":"method","source":{"line":377,"path":"src/ProfileService.lua"}},{"name":"Reconcile","desc":"Fills in missing variables inside [```Profile.Data```](#Data) from the [```profile_template```](/api/DatastoreTemplateService#DataTemplate) that was provided\\n when calling [```ProfileService.GetProfileStore()```](/api/ProfileService#GetProfileStore). It\'s often necessary to use ```:Reconcile()``` if\\n you\'re applying changes to your profile_template over the course of your game\'s development after release.\\n\\nRead the [API Documentation](https://madstudioroblox.github.io/ProfileService/api/#profilereconcile) for more info","params":[],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","source":{"line":390,"path":"src/ProfileService.lua"}},{"name":"ListenToRelease","desc":"Listener functions subscribed to ```Profile:ListenToRelease()``` will be called when the profile\\n is remotely released (Being ```ForceLoad```\'ed on a remote server) or locally ([```Profile:Release()```](#Release)).\\n In common practice, the profile will rarely be released before the player leaves the game so it\'s recommended to simply\\n [:Kick()](https://developer.roblox.com/en-us/api-reference/function/Player/Kick) the Player when this happens.\\n\\n:::caution\\nAfter ```Profile:ListenToRelease()``` is triggered, it is too late to change ```Profile.Data``` for the final time. As long as the profile\\n is active ([```Profile:IsActive()```](#IsActive) == ```true```), you should store all profile related data immediately after it becomes\\n available.\\n:::","params":[{"name":"listener","desc":"A listener which is called when the profile is released","lua_type":"() -> ()"}],"returns":[{"desc":"A connection which can be used to disconnect the listener","lua_type":"RBXScriptConnection"}],"function_type":"method","source":{"line":410,"path":"src/ProfileService.lua"}},{"name":"Release","desc":"Removes the session lock for this profile on the Roblox server. Call this method after you\'re done working\\n with the ```Profile``` object. Profile data will be immediately saved for the last tiem.","params":[],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","source":{"line":420,"path":"src/ProfileService.lua"}},{"name":"ListenToHopReady","desc":"```Profile:ListenToHopReady()``` is in many ways similiar to [```Profile:ListenToRelease()```](#ListenToRelease) however,\\n ```Profile:ListenToHopReady()``` is called when the session-lock on the profile is released. In most cases, this should be within a second,\\n however, if a ```Profile``` is released next to an auto-update, it may take up to 7 seconds to be called.\\n\\nFor more information on this method, visit the [Profile Service API](https://madstudioroblox.github.io/ProfileService/api/#profilelistentohopready).","params":[{"name":"listener","desc":"The listener which is called when the profile has released it\'s session-lock","lua_type":"() -> ()"}],"returns":[{"desc":"The connection which can be used to disconnect the listener","lua_type":"RBXScriptConnection"}],"function_type":"method","source":{"line":435,"path":"src/ProfileService.lua"}},{"name":"AddUserId","desc":"Associates a ```UserId``` with the profile. Multiple users can be associated with a single profile by\\n calling this method for each individual ```UserId```. The primary use of this method is to comply with [GDPR](https://gdpr-info.eu/art-17-gdpr/) (The right to erasure).","params":[{"name":"user_id","desc":"The UserId to associate with the profile","lua_type":"number"}],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","source":{"line":447,"path":"src/ProfileService.lua"}},{"name":"RemoveUserId","desc":"Unassociates ```UserId``` with the profile, if it was initially associated.","params":[{"name":"user_id","desc":"The UserId to remove from the DataStore","lua_type":"number"}],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","source":{"line":458,"path":"src/ProfileService.lua"}},{"name":"Identify","desc":"Returns a string containing DataStore name, scope and key. Used for debugging.\\n\\n```lua\\n-- Example return: \\"[Store:\\"GameData\\";Scope:\\"Live\\";Key:\\"Player_2312310\\"]\\"\\n```","params":[],"returns":[{"desc":"A string containing the Store, Scope, and Key","lua_type":"string"}],"function_type":"method","source":{"line":471,"path":"src/ProfileService.lua"}},{"name":"SetMetaTag","desc":"Equivalent of ```Profile.MetaData.MetaTags[tag_name] = value```. Use for tagging your profile with information about itself\\n such as:\\n\\n- ```Profile:SetMetaTag(\\"DataVersion\\", 1)```to let your game know whether ```Profile.Data``` needs to be converted after massive changes to your game\\n- Anything set through ```Profile:SetMetaTag(tag_name, value)``` will be available through\\n ```Profile.MetaData.MetaTagsLatest[tag_name] after an auto-save or a [```:Save()```](#Save) call -\\n ```Profile.MetaData.MetaTagsLatest``` is a version of ```Profile.MetaData.MetaTags``` that has\\n been successfully saved to the DataStore.","params":[{"name":"tag_name","desc":"","lua_type":"string"},{"name":"value","desc":"Any DataStore supported value, typically a primative","lua_type":"any"}],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","source":{"line":490,"path":"src/ProfileService.lua"}},{"name":"Save","desc":"Call ```Profile:Save()``` to quickly progress ```GlobalUpdates``` state or to speed up the progagation\\n of ```Profile.MetaData.MetaTags``` changes to ```Profile.MetaData.MetaTagsLatest```.\\n\\n```Profile:Save()``` **should not be called for saving** ```Profile.Data``` or\\n ```Profile.MetaData.MetaTags``` - this is already done for you automatically.\\n\\n:::caution\\nCalling ```Profile:Save()``` when the ```Profile``` is released will throw an error. You can check [```Profile:IsActive()```](#IsActive)\\n before using this method.\\n:::","params":[],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","source":{"line":508,"path":"src/ProfileService.lua"}},{"name":"ClearGlobalUpdates","desc":":::warning\\nOnly works on profiles loaded through [```ProfileStore:ViewProfileAsync()```](/api/ProfileStore#ViewProfileAsync) or\\n [```ProfileStore:ProfileVersionQuery()```](/api/ProfileStore#ProfileVersionQuery)\\n:::\\n\\nClears all global update data (active or locked) for a profile payload. It may be desirable to clear potential \\"residue\\"\\n global updates (e.g. pending gifts) which were existing in a snapshot which is being used to recover player data through\\n [```ProfileStore:ProfileVersionQuery()```](/api/ProfileStore#ProfileVersionQuery)","params":[],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","source":{"line":524,"path":"src/ProfileService.lua"}},{"name":"OverwriteAsync","desc":":::warning\\nOnly works on profiles loaded through [```ProfileStore:ViewProfileAsync()```](/api/ProfileStore#ViewProfileAsync) or\\n [```ProfileStore:ProfileVersionQuery()```](/api/ProfileStore#ProfileVersionQuery)\\n:::\\n\\n:::warning Only use for rollback payloads (Setting latest version to a copy of a previous version)!\\nUsing this method for editing latest player data when the player is in-game can lead to several minutes of lost progress -\\n it should be replaced by [```:LoadProfileAsync```](/api/ProfileStore/LoadProfileAsync) which will wait for\\n the next live profile auto-save if the player is in-game, allowing the remote server to release the profile\\n and save latest data.\\n:::\\n\\nPushes the ```Profile``` payload to the DataStore (saves the profile) and releases the session lock for the profile.","params":[],"returns":[],"function_type":"method","yields":true,"source":{"line":544,"path":"src/ProfileService.lua"}}],"properties":[{"name":"MetaData","desc":"```Profile.MetaData``` is a table containing data about the profile itself\\n```Profile.MetaData.MetaTags``` is saved on the same DataStore key together with [```Profile.Data```](#Data)","lua_type":"ProfileMetaData","readonly":true,"source":{"line":303,"path":"src/ProfileService.lua"}},{"name":"MetaTagsUpdated","desc":"A signal which fires every auto-save in which the profile has different ```Profile.MetaData.MetaTags```. Uses a custom implementation of an RBXScriptSignal so some methods may not be available.\\n\\n**```Profile.MetaTagsUpdated``` will also fire when a profile is saved for the last time and released**","lua_type":"RBXScriptSignal","readonly":true,"source":{"line":313,"path":"src/ProfileService.lua"}},{"name":"RobloxMetaData","desc":":::warning There are harsh limits for RobloxMetaData size, at the time of writing this RobloxMetaData cant exceed 300 characters.\\n:::\\nSimiliar to setting the metadata in a DataStoreOptions instance, read the [official documentation](https://madstudioroblox.github.io/ProfileService/api/#profilerobloxmetadata) for more info","lua_type":"table","source":{"line":322,"path":"src/ProfileService.lua"}},{"name":"UserIds","desc":"User ids associated with this profile. Entries must be added with [```Profile:AddUserId()```](#AddUserId)\\n and removed with [```Profile:RemoveUserId()```](#RemoveUserId).","lua_type":"table","readonly":true,"source":{"line":331,"path":"src/ProfileService.lua"}},{"name":"KeyInfo","desc":"The [DataStoreKeyInfo](https://developer.roblox.com/en-us/api-reference/class/DataStoreKeyInfo) instance related to this profile.","lua_type":"DataStoreKeyInfo","source":{"line":338,"path":"src/ProfileService.lua"}},{"name":"KeyInfoUpdated","desc":"A signal that gets triggered every time [```Profile.KeyInfo```](#KeyInfo) is updated\\n with a new [DataStoreKeyInfo](https://developer.roblox.com/en-us/api-reference/class/DataStoreKeyInfo)\\n instance reference after every auto-save or profile release. This uses a custom implementation of\\n an RBXScriptSignal, so some methods may not be available.","lua_type":"RBXScriptSignal","readonly":true,"source":{"line":349,"path":"src/ProfileService.lua"}},{"name":"GlobalUpdates","desc":"This is the [```global_updates```](/api/global_updates) object tied to the specific ```Profile```. It exposes methods for update processing. (See [```Global Updates```](/api/global_updates) for more info)","lua_type":"global_updates","readonly":true,"source":{"line":357,"path":"src/ProfileService.lua"}}],"types":[{"name":"ProfileMetaData","desc":"","fields":[{"name":"ProfileCreateTime","lua_type":"number","desc":"Read-only"},{"name":"SessionLoadCount","lua_type":"number","desc":"Read-only"},{"name":"ActiveSession","lua_type":"table?","desc":"Read-only"},{"name":"MetaTags","lua_type":"table","desc":"Writable"},{"name":"MetaTagsLatest","lua_type":"table","desc":"Read-only"}],"source":{"line":294,"path":"src/ProfileService.lua"}}],"name":"Profile","desc":"Profiles are the main storage for data in ProfileService, they are created through [```ProfileStore:LoadProfileAsync()```](/api/ProfileStore#LoadProfileAsync)","source":{"line":284,"path":"src/ProfileService.lua"}}')}}]);