"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3452],{65279:e=>{e.exports=JSON.parse('{"functions":[{"name":"AddCash","desc":"Gives a player an amount of cash\\n\\n```lua\\nfor _, Player in game:GetService(\\"Players\\"):GetChildren() do\\n    DatastoreService:AddCash(Player, 200)\\nend\\n-- Give every Player 200 cash\\n```","params":[{"name":"Player","desc":"The player to give cash to","lua_type":"Player"},{"name":"Amount","desc":"The amount of cash to give to the player","lua_type":"number"}],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","source":{"line":24,"path":"src/DatastoreService.lua"}},{"name":"AddEXP","desc":"Adds the amount of EXP to a player, then runs DatastoreService:CheckEXP on the player\\n\\n```lua\\nfor _, Player in game:GetService(\\"Players\\"):GetChildren() do\\n    if Player.Name == \\"Shedletsky\\" then\\n        DatastoreService:AddEXP(Player, 2006)\\n    end\\nend\\n-- Give Shedletsky 2006 EXP if he\'s in the server\\n```","params":[{"name":"Player","desc":"The player to give EXP to","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","source":{"line":43,"path":"src/DatastoreService.lua"}},{"name":"AddRank","desc":"Adds a set amount of ranks to the player\\n\\n```lua\\ngame.PlayerAdded:Connect(function(Player: Player)\\n    Player:AddRank(Player, Player.AccountAge)\\nend)\\n-- Give every player who joins the amount of ranks as their account age\\n```","params":[{"name":"Player","desc":"The player to give ranks to","lua_type":"Player"},{"name":"Amount","desc":"The amount of ranks to give, negatives and 0 are supported","lua_type":"number"}],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","source":{"line":61,"path":"src/DatastoreService.lua"}},{"name":"CalculateExpNeeded","desc":"Calculated the amount of EXP the player needs for another level\\n\\n```lua\\nlocal RankToCalculate = 23\\nlocal EXPNeededToLevelUp = DatastoreService:CalculateExpNeeded(RankToCalculate)\\nprint(\\"You need \\" .. EXPNeededToLevelUp .. \\" EXP to level up from level \\" .. RankToCalculate)\\n-- Calculate how much EXP is needed to level up from rank 23\\n```","params":[{"name":"Rank","desc":"The rank used to calculate the amount of EXP needed","lua_type":"number"}],"returns":[{"desc":"The amount of EXP needed for the next level+","lua_type":"FilteredItemsList"}],"function_type":"method","source":{"line":78,"path":"src/DatastoreService.lua"}},{"name":"CheckEXP","desc":"Checks the players EXP to see if a rank needs to be added\\n\\n```lua\\nworkspace.Part.Touched:Connect(function(Hit)\\n    local FoundPlayer = game:GetService(\\"Players\\"):GetPlayerFromCharacter(Hit.Parent)\\n    if FoundPlayer then\\n        DatastoreService:CheckEXP(FoundPlayer)\\n    end\\nend)\\n-- Checks the EXP of anyone who touches a part\\n```","params":[{"name":"Player","desc":"The player to check the EXP of","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","source":{"line":98,"path":"src/DatastoreService.lua"}},{"name":"EquipItem","desc":"Attemps to equip an item for the player\\n\\n```lua\\nlocal ChosenPlayer = game:GetService(\\"Players\\"):GetPlayers()[1]\\nif not ChosenPlayer then return end\\nDatastoreService:EquipItem(ChosenPlayer, 3)\\n-- Equip item with ID 3 to the first player\\n```","params":[{"name":"Player","desc":"The player to try equip the item to","lua_type":"Player"},{"name":"ItemId","desc":"The Item to try equip","lua_type":"Item"}],"returns":[{"desc":"Whether or not the item was equipped","lua_type":"boolean"},{"desc":"If the item was not equipped, a message as to why is returned","lua_type":"string?"}],"function_type":"method","source":{"line":117,"path":"src/DatastoreService.lua"}},{"name":"GetProfileData","desc":"Returns the data of a profile if that profile exists, or nil if it doesnt\\n\\n```lua\\nlocal Roblox = game:GetService(\\"Players\\"):FindFirstChild(\\"Roblox\\")\\nif Roblox and Roblox:IsA(\\"Player\\") then\\n    local RobloxData = DatastoreService:GetProfileData(Roblox)\\n    if not RobloxData then\\n        print(\\"Roblox has no data or it isn\'t loaded yet!\\")\\n        return\\n    end\\n    print(\\"Roblox has: \\" .. RobloxData.Cash .. \\" cash!\\")\\nend\\n-- View Roblox\'s Cash value assuming he is in the server and has data loaded\\n```","params":[{"name":"Player","desc":"The player to get the data of","lua_type":"Player"}],"returns":[{"desc":"The data of the player","lua_type":"DataTemplate"}],"function_type":"method","source":{"line":140,"path":"src/DatastoreService.lua"}},{"name":"GiveItem","desc":"Gives the chosen player an item\\n\\n```lua\\ngame:GetService(\\"Players\\").PlayerAdded:Connect(function(Player)\\n    Player.Chatted:Connect(function(msg)\\n        local ChattedID = tonumber(msg)\\n        if ChattedID then\\n            DatastoreService:GiveItem(Player, ChattedID, {AdminSpawned = true})\\n        end\\n    end)\\nend)\\n-- Every time a player chats if the message is an ID, give them that item\\n```","params":[{"name":"Player","desc":"The player to give the item to","lua_type":"Player"},{"name":"ItemId","desc":"The chosen item to give to the player","lua_type":"Item"},{"name":"ExtraData","desc":"Any extra data such as whether it was crafted or if it was from an admin","lua_type":"ExtraItemGiveData?"}],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","source":{"line":164,"path":"src/DatastoreService.lua"}},{"name":"GlobalUpdateProfile","desc":"Globally updates the chosen profile to a new set of data\\n\\n```lua\\nDatastoreService:GlobalUpdateProfile(\\"builderman\\", {Cash = -131, Rank = 1000})\\n-- Attempt to globaly update buildermans Cash and Rank data\\n```\\n\\n:::caution\\nCalling this function too much may cause issues with data!\\nPlease read the [Profile Service Docs](https://madstudioroblox.github.io/ProfileService/api/#profilestoreglobalupdateprofileasync) for more info!\\n:::","params":[{"name":"ProfileKey","desc":"The profile key of the player being updated","lua_type":"ProfileKey"},{"name":"NewData","desc":"The new data of the profile to update, does not need to be complete","lua_type":"DataTemplate"}],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","yields":true,"source":{"line":186,"path":"src/DatastoreService.lua"}},{"name":"TakeItem","desc":"Takes an item from the chosen player\\n\\n```lua\\nfor _, Player in game:GetService(\\"Players\\"):GetPlayers() do\\n    DatastoreService:TakeItem(Player, 1)\\n    print(\\"Took Item of ID 1 from \\" .. Player.Name)\\nend\\n-- Takes an Item with ID 1 from every player, and prints a message for each player\\n```","params":[{"name":"Player","desc":"The player to take the item from","lua_type":"Player"},{"name":"ItemId","desc":"The chosen item to take from the player","lua_type":"Item"},{"name":"ExtraData","desc":"Any extra data such as whether it was crafted or if it was from an admin","lua_type":"ExtraItemGiveData?"}],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","source":{"line":206,"path":"src/DatastoreService.lua"}},{"name":"UnequipItem","desc":"Attemps to unequip an item for the player\\n\\n```lua\\nlocal PlayersList = game:GetService(\\"Players\\"):GetPlayers()\\nlocal ChosenNumber = math.random(1, #PlayersList)\\nlocal ChosenPlayer = PlayersList[ChosenNumber]\\nDatastoreService:UnequipItem(ChosenPlayer, 2)\\n-- Unequips Item of ID 2 from a random Player\\n```","params":[{"name":"Player","desc":"The player to try unequip the item for","lua_type":"Player"},{"name":"ItemId","desc":"The Item to try unequip","lua_type":"Item"}],"returns":[{"desc":"Whether or not the item was unequipped","lua_type":"boolean"},{"desc":"If the item was not unequipped, a message as to why is returned","lua_type":"string?"}],"function_type":"method","source":{"line":226,"path":"src/DatastoreService.lua"}},{"name":"ViewProfile","desc":"Allows viewing a profile, even when the player is offline / on another server\\n\\n```lua\\nlocal DataFor1x1x1x1 = DatastoreService:ViewProfile(\\"1x1x1x1\\")\\n\\nif not DataFor1x1x1x1 then\\n    print(\\"1x1x1x1 has no data\\")\\n    return\\nend\\n\\nprint(\\"1x1x1x1 is rank \\" .. DataFor1x1x1x1.Rank)\\n-- Checks the rank for user 1x1x1x1\\n```\\n\\n:::info\\nWhile this function does check for players in the server, its recommended to use [DatastoreService:GetProfileData()](#GetProfileData) if their existance is guarenteed.\\n:::","params":[{"name":"ProfileKey","desc":"The username or userid of the player to view the profile of","lua_type":"ProfileKey"}],"returns":[{"desc":"The data of the profile being viewed","lua_type":"DataTemplate"}],"function_type":"method","yields":true,"source":{"line":253,"path":"src/DatastoreService.lua"}},{"name":"FilterInventory","desc":"Filters through the players inventory based on parameters\\n\\n```lua\\nlocal FoundPlayer = game:GetService(\\"Players\\"):FindFirstChild(\\"alexnewtron\\")\\n\\nif not FoundPlayer then\\n    return\\nend\\n\\nlocal InventoryFilterParams = SharedCreators.InventoryFilterParams.new()\\n\\nlocal FilteredInventory = DatastoreService.FilterInventory(FoundPlayer, InventoryFilterParams)\\nprint(FilteredInventory)\\n-- Filters alexnewtron\'s inventory\\n```","params":[{"name":"Player","desc":"The player to filter the inventory for","lua_type":"Player"},{"name":"FilterParams","desc":"The parameters used to filter the inventory","lua_type":"InventoryFilterParams"}],"returns":[{"desc":"A filtered list of the inventory","lua_type":"FilteredItemsList"}],"function_type":"static","source":{"line":278,"path":"src/DatastoreService.lua"}},{"name":"SetStats","desc":"Actions code to a player who has just joined, such as leaderstats\\n\\n```lua\\ngame.Players.PlayerAdded:Connect(function(Player)\\n    if Player:FindFirstChild(\\"leaderstats\\") then\\n        return\\n    end -- DatastoreService.SetStats will only work once, and if they have leaderstats it\'s already been set\\n    DatastoreService.SetStats(Player)\\nend)\\n-- Sets the stats of any new player who joins assuming it hasnt already been set\\n```","params":[{"name":"Player","desc":"The player to set the stats for","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"static","source":{"line":298,"path":"src/DatastoreService.lua"}}],"properties":[],"types":[],"name":"DatastoreService","desc":"Custom functions for easy interaction with ProfileService","source":{"line":6,"path":"src/DatastoreService.lua"}}')}}]);