[{"title":"InventoryFilterParams","type":0,"sectionRef":"#","url":"/UniversalCraftwarsDocs/api/InventoryFilterParams","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"InventoryFilterParams","url":"/UniversalCraftwarsDocs/api/InventoryFilterParams#properties","content":" "},{"title":"Search​","type":1,"pageTitle":"InventoryFilterParams","url":"/UniversalCraftwarsDocs/api/InventoryFilterParams#Search","content":"&lt;/&gt; InventoryFilterParams.Search: string The string used to filter by item name  "},{"title":"ClassFilters​","type":1,"pageTitle":"InventoryFilterParams","url":"/UniversalCraftwarsDocs/api/InventoryFilterParams#ClassFilters","content":"&lt;/&gt; InventoryFilterParams.ClassFilters: {Class?} The classes used to filter items by  "},{"title":"RarityFilter​","type":1,"pageTitle":"InventoryFilterParams","url":"/UniversalCraftwarsDocs/api/InventoryFilterParams#RarityFilter","content":"&lt;/&gt; InventoryFilterParams.RarityFilter: Rarity The rarity used to filter items  "},{"title":"PageNumber​","type":1,"pageTitle":"InventoryFilterParams","url":"/UniversalCraftwarsDocs/api/InventoryFilterParams#PageNumber","content":"&lt;/&gt; InventoryFilterParams.PageNumber: number The page used to decide where to return once results are filtered  "},{"title":"SlotsPerPage​","type":1,"pageTitle":"InventoryFilterParams","url":"/UniversalCraftwarsDocs/api/InventoryFilterParams#SlotsPerPage","content":"&lt;/&gt; InventoryFilterParams.SlotsPerPage: number The amount of slots that are registered on the page, should always be 10 "},{"title":"DatastoreTemplateService","type":0,"sectionRef":"#","url":"/UniversalCraftwarsDocs/api/DatastoreTemplateService","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"DatastoreTemplateService","url":"/UniversalCraftwarsDocs/api/DatastoreTemplateService#types","content":" "},{"title":"DataTemplate​","type":1,"pageTitle":"DatastoreTemplateService","url":"/UniversalCraftwarsDocs/api/DatastoreTemplateService#DataTemplate","content":"&lt;/&gt; interface DataTemplate { Inventory: {InventoryItem}-- The players inventory Rank: number-- The players rank Cash: number-- The amount of cash the player has EXP: number-- The amount of EXP the player has EquippedItems: {Item}-- The items the player has equipped } The template which is used for profilestore generation and as a placeholder type for profile data "},{"title":"Functions​","type":1,"pageTitle":"DatastoreTemplateService","url":"/UniversalCraftwarsDocs/api/DatastoreTemplateService#functions","content":" "},{"title":"GetTemplate​","type":1,"pageTitle":"DatastoreTemplateService","url":"/UniversalCraftwarsDocs/api/DatastoreTemplateService#GetTemplate","content":"&lt;/&gt; DatastoreTemplateService:GetTemplate() → DataTemplate-- The template for data Returns the template for data local DataTemplate = DatastoreTemplateService:GetTemplate() for Key, Value in pairs(DataTemplate) do print(Key, Value) end -- Prints every Key and Value pair in the Data Template  "},{"title":"BiomeHandler","type":0,"sectionRef":"#","url":"/UniversalCraftwarsDocs/api/BiomeHandler","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"BiomeHandler","url":"/UniversalCraftwarsDocs/api/BiomeHandler#types","content":" "},{"title":"Biome​","type":1,"pageTitle":"BiomeHandler","url":"/UniversalCraftwarsDocs/api/BiomeHandler#Biome","content":"&lt;/&gt; type Biome = &quot;Overworld&quot; | &quot;Snow&quot; | &quot;Flame&quot; | &quot;Nature&quot; | &quot;Starry&quot; A biome, typically used in the biome handler local BiomeToUse: Biome = &quot;Flame&quot; BiomeHandler:AdjustBiome(BiomeToUse)   "},{"title":"ExtraBiomeData​","type":1,"pageTitle":"BiomeHandler","url":"/UniversalCraftwarsDocs/api/BiomeHandler#ExtraBiomeData","content":"&lt;/&gt; interface ExtraBiomeData { Chance: number-- The chance of the biome occuring, in % Duration: number-- The duration of the biome, in seconds } The extra data for a Biome, including Chance and Duration local CurrentBiomeData: ExtraBiomeData = BiomeHandler.CurrentBiomeData print(&quot;The current biome has a duration of &quot; .. CurrentBiomeData.Duration .. &quot; seconds&quot;)  "},{"title":"Properties​","type":1,"pageTitle":"BiomeHandler","url":"/UniversalCraftwarsDocs/api/BiomeHandler#properties","content":" "},{"title":"BiomeChanged​","type":1,"pageTitle":"BiomeHandler","url":"/UniversalCraftwarsDocs/api/BiomeHandler#BiomeChanged","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; BiomeHandler.BiomeChanged: RBXScriptSignal  An RBXScriptSignal which fires when the biome is changed, passing the new Biome as an argument BiomeHandler.BiomeChanged:Connect(function(NewBiome: Biome) print(NewBiome) end)   "},{"title":"BiomeStartTick​","type":1,"pageTitle":"BiomeHandler","url":"/UniversalCraftwarsDocs/api/BiomeHandler#BiomeStartTick","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; BiomeHandler.BiomeStartTick: number The time the biome started according to tick() task.wait(5) print(&quot;The biome started at &quot; .. BiomeHandler.BiomeStartTick)   "},{"title":"CurrentBiome​","type":1,"pageTitle":"BiomeHandler","url":"/UniversalCraftwarsDocs/api/BiomeHandler#CurrentBiome","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; BiomeHandler.CurrentBiome: Biome The current Biome if BiomeHandler.CurrentBiome == &quot;Starry&quot; then print(&quot;It's starry tonight!&quot;) end   "},{"title":"CurrentBiomeData​","type":1,"pageTitle":"BiomeHandler","url":"/UniversalCraftwarsDocs/api/BiomeHandler#CurrentBiomeData","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; BiomeHandler.CurrentBiomeData: ExtraBiomeData The extra data about the current biome local CurrentBiomeData: ExtraBiomeData = BiomeHandler.CurrentBiomeData print(&quot;The current biome has a &quot; .. CurrentBiomeData.Chance .. &quot;% chance of occuring&quot;)   "},{"title":"EnableBiomeTick​","type":1,"pageTitle":"BiomeHandler","url":"/UniversalCraftwarsDocs/api/BiomeHandler#EnableBiomeTick","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; BiomeHandler.EnableBiomeTick: boolean Whether or not the game with attempt to change the biome while true do if not BiomeHandler.EnableBiomeTick then print(&quot;Biome tick is disabled!&quot;) else print(&quot;Biome tick is enabled!&quot;) end task.wait() end  "},{"title":"Functions​","type":1,"pageTitle":"BiomeHandler","url":"/UniversalCraftwarsDocs/api/BiomeHandler#functions","content":" "},{"title":"AdjustBiome​","type":1,"pageTitle":"BiomeHandler","url":"/UniversalCraftwarsDocs/api/BiomeHandler#AdjustBiome","content":"&lt;/&gt; BiomeHandler.AdjustBiome( BiomeName: Biome-- The biome to set to ) → nil Sets the current biome to the specified one task.wait(5) BiomeHandler.AdjustBiome(&quot;Snow&quot;) -- Changes the biome to snow 5 seconds after the game is run  "},{"title":"ChatMessageLogDisplayCreator","type":0,"sectionRef":"#","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplayCreator","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ChatMessageLogDisplayCreator","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplayCreator#functions","content":" "},{"title":"new​","type":1,"pageTitle":"ChatMessageLogDisplayCreator","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplayCreator#new","content":"&lt;/&gt; ChatMessageLogDisplayCreator.new() → ChatMessageLogDisplay-- The created MessageLogDisplay Creates a new MessageLogDisplay object "},{"title":"SharedCreators","type":0,"sectionRef":"#","url":"/UniversalCraftwarsDocs/api/SharedCreators","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"SharedCreators","url":"/UniversalCraftwarsDocs/api/SharedCreators#functions","content":" "},{"title":"CraftingFilterParams.new​","type":1,"pageTitle":"SharedCreators","url":"/UniversalCraftwarsDocs/api/SharedCreators#CraftingFilterParams.new","content":"&lt;/&gt; SharedCreators.CraftingFilterParams.new() → CraftingFilterParams Creates a new CraftingFilterParams local NewCraftingFilterParams = SharedCreators.CraftingFilterParams.new() NewCraftingFilterParams.CraftingType = &quot;Furniture&quot; print(&quot;Current search: &quot; .. NewCraftingFilterParams.Search) -- Creates a new CraftingFilterParams then sets the CraftingType to Furniture and prints the Search   "},{"title":"InventoryFilterParams.new​","type":1,"pageTitle":"SharedCreators","url":"/UniversalCraftwarsDocs/api/SharedCreators#InventoryFilterParams.new","content":"&lt;/&gt; SharedCreators.InventoryFilterParams.new() → InventoryFilterParams Creates a new InventoryFilterparams local NewInventoryFilterParams = SharedCreators.InventoryFilterParams.new() NewInventoryFilterParams.PageNumber = 3 print(&quot;Current rarity: &quot; .. NewInventoryFilterParams.Rarity) -- Creates a new InventoryFilterParams then sets the PageNumber to 3 and prints the Rarity  "},{"title":"CraftingFilterParams","type":0,"sectionRef":"#","url":"/UniversalCraftwarsDocs/api/CraftingFilterParams","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"CraftingFilterParams","url":"/UniversalCraftwarsDocs/api/CraftingFilterParams#properties","content":" "},{"title":"Search​","type":1,"pageTitle":"CraftingFilterParams","url":"/UniversalCraftwarsDocs/api/CraftingFilterParams#Search","content":"&lt;/&gt; CraftingFilterParams.Search: string The string used to filter by item name  "},{"title":"PageNumber​","type":1,"pageTitle":"CraftingFilterParams","url":"/UniversalCraftwarsDocs/api/CraftingFilterParams#PageNumber","content":"&lt;/&gt; CraftingFilterParams.PageNumber: number The page used to decide where to return once results are filtered  "},{"title":"SlotsPerPage​","type":1,"pageTitle":"CraftingFilterParams","url":"/UniversalCraftwarsDocs/api/CraftingFilterParams#SlotsPerPage","content":"&lt;/&gt; CraftingFilterParams.SlotsPerPage: number The amount of slots that are registered on the page, should always be 10  "},{"title":"CraftingType​","type":1,"pageTitle":"CraftingFilterParams","url":"/UniversalCraftwarsDocs/api/CraftingFilterParams#CraftingType","content":"&lt;/&gt; CraftingFilterParams.CraftingType: CraftingType The type of crafting recipe to filter by "},{"title":"ServerChatHandler","type":0,"sectionRef":"#","url":"/UniversalCraftwarsDocs/api/ServerChatHandler","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"ServerChatHandler","url":"/UniversalCraftwarsDocs/api/ServerChatHandler#types","content":" "},{"title":"LoggedChatMessagesServer​","type":1,"pageTitle":"ServerChatHandler","url":"/UniversalCraftwarsDocs/api/ServerChatHandler#LoggedChatMessagesServer","content":"&lt;/&gt; type LoggedChatMessagesServer = {[Player ]: {[string]: string}} All the logged chat messages on the server "},{"title":"Functions​","type":1,"pageTitle":"ServerChatHandler","url":"/UniversalCraftwarsDocs/api/ServerChatHandler#functions","content":" "},{"title":"CreateChatOnClient​","type":1,"pageTitle":"ServerChatHandler","url":"/UniversalCraftwarsDocs/api/ServerChatHandler#CreateChatOnClient","content":"&lt;/&gt; ServerChatHandler:CreateChatOnClient( Player: Player ,-- The Player to create a chat for Text: string,-- The text to display in chat TextColor: Color3? ,-- The color for the text to be ShouldSanitizeMessage: boolean?,-- Whether the message should be sanitized for rich text before displayed ShouldFilterMessage: boolean?,-- Whether the message should be filtered GradientData: ChatGradientData?-- Any gradient data for the message ) → string-- The new message Id Creates a chat message on the specified client  "},{"title":"EditChatMessage​","type":1,"pageTitle":"ServerChatHandler","url":"/UniversalCraftwarsDocs/api/ServerChatHandler#EditChatMessage","content":"&lt;/&gt; ServerChatHandler:EditChatMessage( Player: Player ,-- The Player to edit the chat message for MessageID: string,-- The Id of the message to edit NewText: string,-- The new text to be displayed in the message ShouldSanitizeMessage: boolean?,-- Whether the new message should be sanitized for rich text before displayed ShouldFilterMessage: boolean?-- Whether the new message should be filtered ) → boolean-- If the edit was successful or not Attempts to edit a chat message for a player, returning whether it was successful.  "},{"title":"ApplyChatMessageGradientToPlayer​","type":1,"pageTitle":"ServerChatHandler","url":"/UniversalCraftwarsDocs/api/ServerChatHandler#ApplyChatMessageGradientToPlayer","content":"&lt;/&gt; ServerChatHandler:ApplyChatMessageGradientToPlayer( Player: Player ,-- The player to apply the gradient for MessageID: string,-- The Id of the message to apply a gradient to GradientColor: ColorSequence? ,-- The color for the gradient to be Transparency: number?,-- The transparency of the gradient Rotation: number?,-- The rotation of the gradient Offset: Vector2? -- The offset of the gradient ) → boolean-- If the gradient was applied or not Attempts to apply a gradient to a chat message, returning if it was successful or not.  "},{"title":"GetLoggedMessages​","type":1,"pageTitle":"ServerChatHandler","url":"/UniversalCraftwarsDocs/api/ServerChatHandler#GetLoggedMessages","content":"&lt;/&gt; ServerChatHandler:GetLoggedMessages() → LoggedChatMessagesServer-- The chat messages which are logged Returns the logged chat messages which are on the server  "},{"title":"CreateChatMessageOnAllClients​","type":1,"pageTitle":"ServerChatHandler","url":"/UniversalCraftwarsDocs/api/ServerChatHandler#CreateChatMessageOnAllClients","content":"&lt;/&gt; ServerChatHandler:CreateChatMessageOnAllClients( Text: string,-- The text to display in chat TextColor: Color3? ,-- The color for the text to be ShouldSanitizeMessage: boolean?,-- Whether the message should be sanitized for rich text before displayed ShouldFilterMessage: boolean?,-- Whether the message should be filtered GradientData: ChatGradientData?-- Any gradient data for the message ) → {[Player ]: string}-- A dictionary of each player the message was sent to, and it's ID Sends a chat message to all players in the server  "},{"title":"GetLatestMessageID​","type":1,"pageTitle":"ServerChatHandler","url":"/UniversalCraftwarsDocs/api/ServerChatHandler#GetLatestMessageID","content":"&lt;/&gt; ServerChatHandler:GetLatestMessageID( Player: Player -- The player to get the latest message Id for ) → string?-- The gotten message Id if it exists Returns the latest chat message Id for a set player if it exists "},{"title":"ClientChatHandler","type":0,"sectionRef":"#","url":"/UniversalCraftwarsDocs/api/ClientChatHandler","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ClientChatHandler","url":"/UniversalCraftwarsDocs/api/ClientChatHandler#functions","content":" "},{"title":"RegisterMessageLogDisplay​","type":1,"pageTitle":"ClientChatHandler","url":"/UniversalCraftwarsDocs/api/ClientChatHandler#RegisterMessageLogDisplay","content":"&lt;/&gt; ClientChatHandler:RegisterMessageLogDisplay( MessageLogDisplay: ChatMessageLogDisplay-- The MessageLogDisplay from the LegacyChat script ) → nil Registers the MessageLogDisplay used to create message labels  "},{"title":"CreateChatMessageClient​","type":1,"pageTitle":"ClientChatHandler","url":"/UniversalCraftwarsDocs/api/ClientChatHandler#CreateChatMessageClient","content":"&lt;/&gt; ClientChatHandler:CreateChatMessageClient( Text: string,-- The text of the chat to create Color: Color3? ,-- The colour of the chat GradientData: ChatGradientData?-- The gradient data for the chat message ) → MadeMessageChat-- The new message made from the function Creates a new message  "},{"title":"EditChatMessageClient​","type":1,"pageTitle":"ClientChatHandler","url":"/UniversalCraftwarsDocs/api/ClientChatHandler#EditChatMessageClient","content":"&lt;/&gt; ClientChatHandler:EditChatMessageClient( MessageID: string,-- The Id of the message to edit NewText: string-- The new text to apply to the message ) → boolean-- Whether the edit was able to be applied Edits a message  "},{"title":"ApplyChatMessageGradientClient​","type":1,"pageTitle":"ClientChatHandler","url":"/UniversalCraftwarsDocs/api/ClientChatHandler#ApplyChatMessageGradientClient","content":"&lt;/&gt; ClientChatHandler:ApplyChatMessageGradientClient( MessageID: string,-- The Id of the message to apply a gradient to GradientColor: ColorSequence? ,-- The color for the gradient to be Transparency: number?,-- The transparency of the gradient Rotation: number?,-- The rotation of the gradient Offset: Vector2? -- The offset of the gradient ) → boolean-- Whether the gradient was applied or not Applies a gradient to a message  "},{"title":"WaitForMessageLogDisplay​","type":1,"pageTitle":"ClientChatHandler","url":"/UniversalCraftwarsDocs/api/ClientChatHandler#WaitForMessageLogDisplay","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ClientChatHandler:WaitForMessageLogDisplay() → () Yields the running thread until there is a MessageLogDisplay "},{"title":"WindLines","type":0,"sectionRef":"#","url":"/UniversalCraftwarsDocs/api/WindLines","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"WindLines","url":"/UniversalCraftwarsDocs/api/WindLines#types","content":" "},{"title":"WindLinesSettings​","type":1,"pageTitle":"WindLines","url":"/UniversalCraftwarsDocs/api/WindLines#WindLinesSettings","content":"&lt;/&gt; interface WindLinesSettings { Lifetime: number-- The lifetime of the wind lines which are generated in seconds Direction: Vector3 -- The direction which the lines travel Speed: number-- The speed at which the lines move Position: Vector3 -- The position to spawn the wind line, I forgot if this was custom added } The settings used to initialize the WindLines library "},{"title":"Functions​","type":1,"pageTitle":"WindLines","url":"/UniversalCraftwarsDocs/api/WindLines#functions","content":" "},{"title":"Init​","type":1,"pageTitle":"WindLines","url":"/UniversalCraftwarsDocs/api/WindLines#Init","content":"&lt;/&gt; WindLines:Init( Settings: WindLinesSettings-- Settings used for the wind lines, containing information like Lifetime ) → nil Initializes the WindLines module, and begins creating wind lines until WindLines:Cleanup() is called  "},{"title":"Cleanup​","type":1,"pageTitle":"WindLines","url":"/UniversalCraftwarsDocs/api/WindLines#Cleanup","content":"&lt;/&gt; WindLines:Cleanup() → nil Cleans up the WindLines module, causing it to stop producing lines "},{"title":"global_updates","type":0,"sectionRef":"#","url":"/UniversalCraftwarsDocs/api/global_updates","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"global_updates","url":"/UniversalCraftwarsDocs/api/global_updates#types","content":" "},{"title":"ProfileServiceGlobalUpdate​","type":1,"pageTitle":"global_updates","url":"/UniversalCraftwarsDocs/api/global_updates#ProfileServiceGlobalUpdate","content":"&lt;/&gt; type ProfileServiceGlobalUpdate = { update_id: string, update_data: any }  "},{"title":"Functions​","type":1,"pageTitle":"global_updates","url":"/UniversalCraftwarsDocs/api/global_updates#functions","content":" "},{"title":"GetActiveUpdates​","type":1,"pageTitle":"global_updates","url":"/UniversalCraftwarsDocs/api/global_updates#GetActiveUpdates","content":"Always Available &lt;/&gt; global_updates:GetActiveUpdates() → {ProfileServiceGlobalUpdate} Should be used immediately after a Profile is loaded to scan and progress any pending Active updates to a Locked state -- Example usage for _, update in ipairs(profile.GlobalUpdates:GetActiveUpdates()) do profile.GlobalUpdates:LockActiveUpdate(update[1]) end   "},{"title":"GetLockedUpdates​","type":1,"pageTitle":"global_updates","url":"/UniversalCraftwarsDocs/api/global_updates#GetLockedUpdates","content":"Always Available &lt;/&gt; global_updates:GetLockedUpdates() → {ProfileServiceGlobalUpdate} Should be used immediately after a Profile is loaded to scan and progress any pending Locked updates to a Cleared state -- Example usage for _, update in ipairs(profile.GlobalUpdates:GetLockedUpdates()) do local update_id = update[1] local update_data = update[2] if update_data.Type == &quot;AdminGift&quot; and update_data.Item == &quot;Coins&quot; then profile.Data.Coins = profile.Data.Coins + update_data.Amount end profile.GlobalUpdates:ClearLockedUpdate(update_id) end   "},{"title":"ListenToNewActiveUpdate​","type":1,"pageTitle":"global_updates","url":"/UniversalCraftwarsDocs/api/global_updates#ListenToNewActiveUpdate","content":"&lt;/&gt; global_updates:ListenToNewActiveUpdate(listener: ( update_id: number, update_data: any ) → ()) → RBXScriptConnection -- The connection which is used to listen to new active updates  info This method is only available when the global_data object is accessed through Profile.GlobalUpdates In most games, you should progress all Active updates to a Locked state. -- Example usage profile.GlobalUpdates:ListenToNewActiveUpdate(function(update_id, update_data) profile.GlobalUpdates:LockActiveUpdate(update_id) end)   "},{"title":"ListenToNewLockedUpdate​","type":1,"pageTitle":"global_updates","url":"/UniversalCraftwarsDocs/api/global_updates#ListenToNewLockedUpdate","content":"&lt;/&gt; global_updates:ListenToNewLockedUpdate( listener: ( update_id: number, update_data: any ) → ()-- Must always call global_updates:ClearLockedUpdate(update_id) after processing the locked update ) → RBXScriptConnection -- The connection which is used to listen to new active updates  info This method is only available when the global_data object is accessed through Profile.GlobalUpdates When you get a Locked update via global_updates:ListenToNewLockedUpdate(), the update is ready to be proccessed and immediately locked. -- Example usage profile.GlobalUpdates:ListenToNewLockedUpdate(function(update_id, update_data) if update_data.Type == &quot;AdminGift&quot; and update_data.Item == &quot;Coins&quot; then profile.Data.Coins = profile.Data.Coins + update_data.Amount end profile.GlobalUpdates:ClearLockedUpdate(update_id) end)   "},{"title":"LockActiveUpdate​","type":1,"pageTitle":"global_updates","url":"/UniversalCraftwarsDocs/api/global_updates#LockActiveUpdate","content":"&lt;/&gt; global_updates:LockActiveUpdate( update_id: number-- The Id representing the global update ) → nil  info This method is only available when the global_data object is accessed through Profile.GlobalUpdates Turns an Active update into a Locked update. Will invoke global_updates:ListenToNewLockedUpdate() after an auto-save (less than 30 seconds) or Profile:Save(). caution Calling global_updates:LockActiveUpdate() when the Profile is released will throw an error. You can check Profile:IsActive() before using this method. ProfileService guarantees that the Profile will be active when global_updates:ListenToNewActiveUpdate() listeners are triggered.  "},{"title":"ClearLockedUpdate​","type":1,"pageTitle":"global_updates","url":"/UniversalCraftwarsDocs/api/global_updates#ClearLockedUpdate","content":"&lt;/&gt; global_updates:ClearLockedUpdate( update_id: number-- The Id representing the global update ) → nil  info This method is only available when the global_data object is accessed through Profile.GlobalUpdates Clears a Locked update completely from the Profile. caution CallingGlobalUpdates:ClearLockedUpdate() when the Profile is released will throw an error. You can check Profile:IsActive() before using this method. ProfileService guarantees that the Profile will be active when GlobalUpdates:ListenToNewLockedUpdate() listeners are triggered.  "},{"title":"AddActiveUpdate​","type":1,"pageTitle":"global_updates","url":"/UniversalCraftwarsDocs/api/global_updates#AddActiveUpdate","content":"&lt;/&gt; global_updates:AddActiveUpdate() → ()  info This method is only available within a global_update_handler from a ProfileStore:GlobalUpdateProfileAsync() call Used to send a new Active update to the profile  "},{"title":"ChangeActiveUpdate​","type":1,"pageTitle":"global_updates","url":"/UniversalCraftwarsDocs/api/global_updates#ChangeActiveUpdate","content":"&lt;/&gt; global_updates:ChangeActiveUpdate( update_id: number,-- The Id of the update to change update_data: any-- The new data to send ) → ()  info This method is only available within a global_update_handler from a ProfileStore:GlobalUpdateProfileAsync() call Changing Active updates can be used for stacking player gifts, particularly when lots of players can be sending lots of gifts to a Youtube celebrity so the Profile would not exceed the DataStore data limit.  "},{"title":"ClearActiveUpdate​","type":1,"pageTitle":"global_updates","url":"/UniversalCraftwarsDocs/api/global_updates#ClearActiveUpdate","content":"&lt;/&gt; global_updates:ClearActiveUpdate( update_id: number-- The Id of the update to clear ) → ()  info This method is only available within a global_update_handler from a ProfileStore:GlobalUpdateProfileAsync() call Removes an Active update from the profile completely. "},{"title":"Intro To The Docs","type":0,"sectionRef":"#","url":"/UniversalCraftwarsDocs/docs/intro","content":"Intro To The Docs Heres some links to do with the docs: API DocsChangelogMore coming in future!","keywords":""},{"title":"ProfileStore","type":0,"sectionRef":"#","url":"/UniversalCraftwarsDocs/api/ProfileStore","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"ProfileStore","url":"/UniversalCraftwarsDocs/api/ProfileStore#types","content":" "},{"title":"not_released_handler_function​","type":1,"pageTitle":"ProfileStore","url":"/UniversalCraftwarsDocs/api/ProfileStore#not_released_handler_function","content":"&lt;/&gt; type not_released_handler_function = ( place_id: number, game_job_id: number ) → ( &quot;Repeat&quot;, &quot;Cancel&quot;, &quot;ForceLoad&quot;, &quot;Steal&quot; ) A function used to determine what to do when a profile which was attempted to be loaded is session locked. Repeat will try load the profile again, potentially recalling this function. Cancel will return nil to the caller. ForceLoad will constantly try load the profile, if a session lock is present it will be released or stolen. Steal will load the profile regardless of the session lock, and can be used to clear dead session locks. caution Steal should usually only be used when the server holding a session lock has been crashed.  "},{"title":"global_update_handler​","type":1,"pageTitle":"ProfileStore","url":"/UniversalCraftwarsDocs/api/ProfileStore#global_update_handler","content":"&lt;/&gt; type global_update_handler = (global_updates) → nil A function used when globally updating a profile. It is passed a global_updates object, and is expected to add the update itself. warning Yielding inside a global_update_handler will cause it to error. "},{"title":"Properties​","type":1,"pageTitle":"ProfileStore","url":"/UniversalCraftwarsDocs/api/ProfileStore#properties","content":" "},{"title":"Mock​","type":1,"pageTitle":"ProfileStore","url":"/UniversalCraftwarsDocs/api/ProfileStore#Mock","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ProfileStore.Mock: ProfileStore ProfileStore.Mock is a mock-copy of methods available within a ProfileStore, with the exception that profile operations are performed on &quot;fake&quot; DataStores, and are forgotten once the game ends. You may load profiles of the same key from ProfileStore and ProfileStore.Mock in parallel, as they will be two completely different profiles since regular and mock profile stores are completely isolated from each other. ProfileStore.Mock is useful for customizing your testing environment in cases when you want to enable Roblox API services in studio, but don't want ProfileService to save to live keys. -- Example local RunService = game:GetService(&quot;RunService&quot;) local GameProfileStore = ProfileService.GetProfileStore(&quot;PlayerData&quot;, ProfileTemplate) if RunService:IsStudio() == true then GameProfileStore = GameProfileStore.Mock end A few more things: Even when Roblox API services are disabled, ProfileStore and ProfileStore.Mock will store profiles in seperate locations. It's better to thing of ProfileStore and ProfileStore.Mock as two different ProfileStore instances unrelated to each other in any way. It's possible to create a project that utilizes both live and mock profiles on live servers! "},{"title":"Functions​","type":1,"pageTitle":"ProfileStore","url":"/UniversalCraftwarsDocs/api/ProfileStore#functions","content":" "},{"title":"LoadProfileAsync​","type":1,"pageTitle":"ProfileStore","url":"/UniversalCraftwarsDocs/api/ProfileStore#LoadProfileAsync","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ProfileStore:LoadProfileAsync( profile_key: string,-- The key for the profile, should be unique to the player if it is being loaded for a player not_released_handler: not_released_handler_function-- The handler for if the profile is session locked ) → Profile?-- Returns the profile which has been loaded or nil if it was canceled in the not_released_handler. local Profile = ProfileStore:LoadProfileAsync( &quot;Player_2312310&quot;, function(place_id, game_job_id) -- place_id and game_job_id identify the Roblox server that has -- this profile currently locked. In rare cases, if the server -- crashes, the profile will stay locked until ForceLoaded by -- a new session. return &quot;Repeat&quot; or &quot;Cancel&quot; or &quot;ForceLoad&quot; or &quot;Steal&quot; end ) info ProfileService saves profiles to live DataStore keys in Roblox Studio when Roblox API services are enabled. See ProfileStore.Mock if saving to live keys during testing is not desired. caution :LoadProfileAsync() can return nil when another remote Roblox server attempts to load the profile at the same time. This case should be extremely rare and it wouldn't be recommended to :Kick() the player if :LoadProfileAsync() doesn't return a Profile. warning Trying to load a profile that has already been session-locked on the same server will result in an error. You may, however, instantly load the profile again after releasing it with Profile:Release().  "},{"title":"GlobalUpdateProfileAsync​","type":1,"pageTitle":"ProfileStore","url":"/UniversalCraftwarsDocs/api/ProfileStore#GlobalUpdateProfileAsync","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ProfileStore:GlobalUpdateProfileAsync( profile_key: string,-- The key used to identify the profile update_handler: global_update_handler-- The global_update_handler used to update the Profile ) → global_updates?-- Returns either a global_updates object or nil Used to create and manage active global updates for profiles. It can be called on any Roblox server and updates can be expected within 30 seconds, regardless of whether it was called on the same server the profile is on or not. Refer to Global Updates for more info. -- Example usage ProfileStore:GlobalUpdateProfileAsync( &quot;Player_2312310&quot;, function(global_updates) global_updates:AddActiveUpdate({ Type = &quot;AdminGift&quot;, Item = &quot;Coins&quot;, Amount = 1000, }) end ) warning Avoid rapid usage of this function as it can cause dead session locks and loss of data. Read The Official Documentation for more info  "},{"title":"ViewProfileAsync​","type":1,"pageTitle":"ProfileStore","url":"/UniversalCraftwarsDocs/api/ProfileStore#ViewProfileAsync","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ProfileStore:ViewProfileAsync( profile_key: string,-- The key used to identify the profile version: string?-- The version to view, or nil for the current version ) → Profile?-- Returns either a profile or nil  info Passing version to a mock or offline profile will throw an error as Mock versioning isn't supported. Attempts to load either the latest version of a profile or the specified version if one is passed without creating a session-lock. Returns nil if the specified version doesn't exist. The returned Profile won't auto-save, and releasing won't do anything. The data in the returned Profile can be changed to create a payload for Profile:OverwriteAsync(). :ViewProfileAsync() is the prefered way of viewing profile data without editing it.  "},{"title":"ProfileVersionQuery​","type":1,"pageTitle":"ProfileStore","url":"/UniversalCraftwarsDocs/api/ProfileStore#ProfileVersionQuery","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ProfileStore:ProfileVersionQuery( profile_key: string,-- The key used to identify the profile sort_direction: SortDirection ,-- The sort direction to use, defaults to Enum.SortDirection.Ascending min_date: DateTime? | number?,-- The minimum date used, when number is provided it is assumed to be in milliseconds max_date: DateTime? | number?-- the maximum date used, when number is provided it is assumed to be in milliseconds ) → ProfileVersionQuery-- Returns a profile version query (I will not be documenting this myself) Creates a ProfileVersionQuery for the specified profile, please refer to the official documentation for a more indepth explanation of this function  "},{"title":"WipeProfileAsync​","type":1,"pageTitle":"ProfileStore","url":"/UniversalCraftwarsDocs/api/ProfileStore#WipeProfileAsync","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ProfileStore:WipeProfileAsync( profile_key: string-- The key used to identify the profile ) → boolean-- Returns a boolean indicating whether the wipe was successful or not Use :WipeProfileASync() to erase user data when complying with right of erasure requests. In live roblox servers, :WipeProfileAsync() must be used on profiles created through ProfileStore.Mock after Profile:Release() and it's known the Profile will no longer be loaded again. "},{"title":"CustomTypes","type":0,"sectionRef":"#","url":"/UniversalCraftwarsDocs/api/CustomTypes","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"CustomTypes","url":"/UniversalCraftwarsDocs/api/CustomTypes#types","content":" "},{"title":"Class​","type":1,"pageTitle":"CustomTypes","url":"/UniversalCraftwarsDocs/api/CustomTypes#Class","content":"&lt;/&gt; type Class = &quot;Melee&quot; | &quot;Mage&quot; | &quot;Ranged&quot; | &quot;Summoner&quot; A class used to denote typically damage type local MeleeClass: Class = &quot;Melee&quot;   "},{"title":"CraftingType​","type":1,"pageTitle":"CustomTypes","url":"/UniversalCraftwarsDocs/api/CustomTypes#CraftingType","content":"&lt;/&gt; type CraftingType = &quot;Default&quot; | &quot;Furniture&quot; | &quot;Shop&quot; A type of crafting local CraftingTypes: {CraftingType} = { &quot;Default&quot;, &quot;Furniture&quot;, &quot;Shop&quot;, }   "},{"title":"ExtraItemGiveData​","type":1,"pageTitle":"CustomTypes","url":"/UniversalCraftwarsDocs/api/CustomTypes#ExtraItemGiveData","content":"&lt;/&gt; interface ExtraItemGiveData { Crafted: boolean?-- Whether or not the item was crafted AdminSpawned: boolean?-- Whether or not this item was from an admin ChatNotify: boolean? } Extra data about why or how an item was given / taken local ExtraGiveData: ExtraItemGiveData = { Crafted = true, AdminSpawned = false, ChatNotify = true, }   "},{"title":"FilteredItemsList​","type":1,"pageTitle":"CustomTypes","url":"/UniversalCraftwarsDocs/api/CustomTypes#FilteredItemsList","content":"&lt;/&gt; type FilteredItemsList = {InventoryItem} A filtered list of items, containing items based on the filter params used to generate it local FilteredInventory: FilteredItemsList = { {Id = 1, Count = 15}, {Id = 5, Count = 29}, {Id = 3, Count = 7}, }   "},{"title":"InventoryItem​","type":1,"pageTitle":"CustomTypes","url":"/UniversalCraftwarsDocs/api/CustomTypes#InventoryItem","content":"&lt;/&gt; interface InventoryItem { Id: Item-- The ID of the item this inventory slot refers to Count: number-- The amount of an item is in this slot } An item found within an inventory, containing an ID and amount local InventorySlotOne: InventoryItem = {Id = 10, Count = 24}   "},{"title":"Item​","type":1,"pageTitle":"CustomTypes","url":"/UniversalCraftwarsDocs/api/CustomTypes#Item","content":"&lt;/&gt; type Item = number An item by its ID local FirstItemID: Item = 1   "},{"title":"ProfileKey​","type":1,"pageTitle":"CustomTypes","url":"/UniversalCraftwarsDocs/api/CustomTypes#ProfileKey","content":"&lt;/&gt; type ProfileKey = string | number A ProfileKey for use in datastores, being either a players name or userid local ProfileKey: ProfileKey = &quot;builderman&quot;   "},{"title":"Rarity​","type":1,"pageTitle":"CustomTypes","url":"/UniversalCraftwarsDocs/api/CustomTypes#Rarity","content":"&lt;/&gt; type Rarity = &quot;Rare&quot; | &quot;None&quot; A rarity used to denote how rare an item is to aquire local RareRarity: Rarity = &quot;None&quot;   "},{"title":"ChatGradientData​","type":1,"pageTitle":"CustomTypes","url":"/UniversalCraftwarsDocs/api/CustomTypes#ChatGradientData","content":"&lt;/&gt; interface ChatGradientData { Transparency: number?-- The transparency of the gradient GradientColor: ColorSequence? -- The color of the gradient Rotation: number?-- The rotation of the gradient Offset: Vector2? -- The offset of the gradient } A gradient applied to a chat message  "},{"title":"ChatObjectPool​","type":1,"pageTitle":"CustomTypes","url":"/UniversalCraftwarsDocs/api/CustomTypes#ChatObjectPool","content":"&lt;/&gt; interface ChatObjectPool { InstancePoolsByClass: {[string]: {Instance }}-- The object pool of each class within in Name: string-- The name of the ObjectPool PoolSizePerType: number-- The size of the pool per type } An object pool for a chat object  "},{"title":"ChatMessageData​","type":1,"pageTitle":"CustomTypes","url":"/UniversalCraftwarsDocs/api/CustomTypes#ChatMessageData","content":"&lt;/&gt; interface ChatMessageData { Channel: string-- The channel the message is in ExtraData: {}-- Data about things such as tags ID: number | string-- The messages Id, number if Roblox made, else a string IsFiltered: boolean-- If the message was filtered Message: string-- The message text MessageLength: number-- The message length through string.len MessageLengthUtf8: number-- The message length through utf8.len MessageType: string-- The type of message OriginalChannel: string-- The channel this message originally was sent in Time: number-- The time the message was sent at } The data of a message used when creating it "},{"title":"ProfileService","type":0,"sectionRef":"#","url":"/UniversalCraftwarsDocs/api/ProfileService","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"ProfileService","url":"/UniversalCraftwarsDocs/api/ProfileService#types","content":" "},{"title":"profile_store_index_table​","type":1,"pageTitle":"ProfileService","url":"/UniversalCraftwarsDocs/api/ProfileService#profile_store_index_table","content":"&lt;/&gt; interface profile_store_index_table { Name: string-- The name of the DataStore, required Scope: string?-- The scope used to search, optional, defaults to global } A table specifying a DataStore name, and an optional scope "},{"title":"Properties​","type":1,"pageTitle":"ProfileService","url":"/UniversalCraftwarsDocs/api/ProfileService#properties","content":" "},{"title":"ServiceLocked​","type":1,"pageTitle":"ProfileService","url":"/UniversalCraftwarsDocs/api/ProfileService#ServiceLocked","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ProfileService.ServiceLocked: boolean A read-only property which indicates if the server is shutting down, if it is ProfileStore methods shouldnt be used anymore.  "},{"title":"IssueSignal​","type":1,"pageTitle":"ProfileService","url":"/UniversalCraftwarsDocs/api/ProfileService#IssueSignal","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ProfileService.IssueSignal: RBXScriptSignal  An analytics endpoint for error logging. This uses a scripted implementation of an RBXScriptSignal, so not all methods may be available. -- Example: ProfileService.IssueSignal:Connect(function(error_message, profile_store_name, profile_key) pcall(function() AnalyticsService:FireEvent( &quot;ProfileServiceIssue&quot;, error_message, profile_store_name, profile_key ) end) end) info The RBXScriptSignal parses a string representing the error message, a string for the profile store name, and lastly a string for the profile key.  "},{"title":"CorruptionSignal​","type":1,"pageTitle":"ProfileService","url":"/UniversalCraftwarsDocs/api/ProfileService#CorruptionSignal","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ProfileService.CorruptionSignal: RBXScriptSignal  An analytics endpoint for when a DataStore key returns invalid profile compontents. This uses a scripted implementation of an RBXScriptSignal, so not all methods may be available. info The RBXScriptSignal parses a string representing the profile store name, and a string for the profile key.  "},{"title":"CriticalStateSignal​","type":1,"pageTitle":"ProfileService","url":"/UniversalCraftwarsDocs/api/ProfileService#CriticalStateSignal","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ProfileService.CriticalStateSignal: RBXScriptSignal  An analytics endpoint for when too many errors are thrown, and it is likely affecting the game. This uses a scripted implementation of an RBXScriptSignal, so not all methods may be available. info The RBXScriptSignal parses a boolean for if it is a critical state or not. "},{"title":"Functions​","type":1,"pageTitle":"ProfileService","url":"/UniversalCraftwarsDocs/api/ProfileService#functions","content":" "},{"title":"GetProfileStore​","type":1,"pageTitle":"ProfileService","url":"/UniversalCraftwarsDocs/api/ProfileService#GetProfileStore","content":"&lt;/&gt; ProfileService.GetProfileStore( profile_store_index: string | profile_store_index_table,-- The name of the profile store profile_template: DataTemplate-- The template used when the player has no previous data ) → ProfileStore-- The profile store with the given Name and Scope  "},{"title":"ChatMessageLogDisplay","type":0,"sectionRef":"#","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#types","content":" "},{"title":"MadeMessageChat​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#MadeMessageChat","content":"&lt;/&gt; interface MadeMessageChat { BaseFrame: Frame -- The frame of the message BaseMessage: TextLabel -- The storage for the text Destroy: () → ()-- A function to destroy the made message Destroyed: boolean-- Whether the message is destroyed FadeInFunction: ( duration: number, CurveUtils ) → ()-- The function to fade in a message FadeOutFunction: ( duration: number, CurveUtils ) → ()-- The function to fade out a message GetHeightFunction: (xSize: number) → (number)-- The function to get the message height ID: number | string-- The message Id, a string for custom messages, and a number for Roblox messages ObjectPool: ChatObjectPool-- The object pool of the message UpdateAnimFunction: ( dtScale: number, CurveUtils ) → ()-- A function to update the text animation UpdateTextFunction: nil-- A functionto update the text, non-existant in SetCore messages for some reason } A dictionary containing info and functions to do with a message "},{"title":"Properties​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#properties","content":" "},{"title":"Destroyed​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#Destroyed","content":"&lt;/&gt; ChatMessageLogDisplay.Destroyed: boolean Whether the MessageLogDisplay is destroyed  "},{"title":"GuiObject​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#GuiObject","content":"&lt;/&gt; ChatMessageLogDisplay.GuiObject: Frame  The frame of the MessageLogDisplay gui  "},{"title":"Scroller​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#Scroller","content":"&lt;/&gt; ChatMessageLogDisplay.Scroller: ScrollingFrame  The scrolling frame of the MessageLogDisplay gui  "},{"title":"Layout​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#Layout","content":"&lt;/&gt; ChatMessageLogDisplay.Layout: UIListLayout  The UIListLayout of the gui  "},{"title":"MessageObjectLog​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#MessageObjectLog","content":"&lt;/&gt; ChatMessageLogDisplay.MessageObjectLog: {} The object log of the MessageLogDisplay  "},{"title":"Name​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#Name","content":"&lt;/&gt; ChatMessageLogDisplay.Name: string The name of the MessageLogDisplay  "},{"title":"CurrentChannelName​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#CurrentChannelName","content":"&lt;/&gt; ChatMessageLogDisplay.CurrentChannelName: string The name of the current channel of the MessageLogDisplay "},{"title":"Functions​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#functions","content":" "},{"title":"WaitUntilParentedCorrectly​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#WaitUntilParentedCorrectly","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ChatMessageLogDisplay:WaitUntilParentedCorrectly() → () Yields the thread until it is parented correctly  "},{"title":"Update​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#Update","content":"&lt;/&gt; ChatMessageLogDisplay:Update( dtScale: number-- The DeltaTime scale? Unsure. ) → () Calls every UpdateAnimFunction of the made messages  "},{"title":"FadeInText​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#FadeInText","content":"&lt;/&gt; ChatMessageLogDisplay:FadeInText( duration: number-- The duration of the fade ) → () Fades in every message  "},{"title":"FadeOutText​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#FadeOutText","content":"&lt;/&gt; ChatMessageLogDisplay:FadeOutText( duration: number-- The duration of the fade ) → () Fades out every message  "},{"title":"FadeInBackground​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#FadeInBackground","content":"&lt;/&gt; ChatMessageLogDisplay:FadeInBackground( duration: number-- The duration of the fade ) → () Does nothing -- This is the function def: function methods:FadeInBackground(duration) --// Do nothing end   "},{"title":"FadeOutBackground​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#FadeOutBackground","content":"&lt;/&gt; ChatMessageLogDisplay:FadeOutBackground( duration: number-- The duration of the fade ) → () Does nothing -- This is the function def: function methods:FadeOutBackground(duration) --// Do nothing end   "},{"title":"SetCurrentChannelName​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#SetCurrentChannelName","content":"&lt;/&gt; ChatMessageLogDisplay:SetCurrentChannelName( name: string-- The name of the new channel ) → () Sets the name of the current channel to the provided one  "},{"title":"Clear​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#Clear","content":"&lt;/&gt; ChatMessageLogDisplay:Clear( excludeCustom: boolean-- Whether custom messages will be ignored in the clear ) → () Clears all messages under the MessageLogDisplay  "},{"title":"ReorderAllMessages​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#ReorderAllMessages","content":"&lt;/&gt; ChatMessageLogDisplay:ReorderAllMessages() → () Reorders all the messages under the log  "},{"title":"PositionMessageLabelInWindow​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#PositionMessageLabelInWindow","content":"&lt;/&gt; ChatMessageLogDisplay:PositionMessageLabelInWindow( messageObject: MadeMessageChat,-- The message to position index: number-- Where in the frame to position the message ) → () Positions a message at a certain index under the log  "},{"title":"UpdateMessageTextHeight​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#UpdateMessageTextHeight","content":"&lt;/&gt; ChatMessageLogDisplay:UpdateMessageTextHeight( messageObject: MadeMessageChat-- The message to update the height of ) → () Updates a select message's height  "},{"title":"IsScrolledDown​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#IsScrolledDown","content":"&lt;/&gt; ChatMessageLogDisplay:IsScrolledDown() → boolean-- If the display is scrolled down Returns if the log display gui is scrolled down  "},{"title":"RemoveLastMessage​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#RemoveLastMessage","content":"&lt;/&gt; ChatMessageLogDisplay:RemoveLastMessage() → () Destroys the last chat message  "},{"title":"AddMessageAtIndex​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#AddMessageAtIndex","content":"&lt;/&gt; ChatMessageLogDisplay:AddMessageAtIndex( messageData: ChatMessageData,-- The data of the message to add index: number-- The index of where to add the message ) → () Adds a message to the log at an index  "},{"title":"RemoveMessageAtIndex​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#RemoveMessageAtIndex","content":"&lt;/&gt; ChatMessageLogDisplay:RemoveMessageAtIndex( index: number-- The index of what message to remove ) → () Removes a message from the log at an index  "},{"title":"AddMessage​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#AddMessage","content":"&lt;/&gt; ChatMessageLogDisplay:AddMessage( messageData: ChatMessageData-- The data of the message to add ) → () Adds a message to the log  "},{"title":"RefreshMessagePlacement​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#RefreshMessagePlacement","content":"&lt;/&gt; ChatMessageLogDisplay:RefreshMessagePlacement( messageData: ChatMessageData-- The data of the message to refresh the placement of ) → () Refreshes the placement of message from its ChatMessageData  "},{"title":"UpdateMessageFiltered​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#UpdateMessageFiltered","content":"&lt;/&gt; ChatMessageLogDisplay:UpdateMessageFiltered( messageData: ChatMessageData-- The data of the message to update the filtering of ) → () Updates a message after being externally filtered  "},{"title":"SetActive​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#SetActive","content":"&lt;/&gt; ChatMessageLogDisplay:SetActive( active: boolean-- THe boolean of the active state ) → () Toggles the message log display gui  "},{"title":"Destroy​","type":1,"pageTitle":"ChatMessageLogDisplay","url":"/UniversalCraftwarsDocs/api/ChatMessageLogDisplay#Destroy","content":"&lt;/&gt; ChatMessageLogDisplay:Destroy() → () Destroys the MessageLogDisplay "},{"title":"Profile","type":0,"sectionRef":"#","url":"/UniversalCraftwarsDocs/api/Profile","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Profile","url":"/UniversalCraftwarsDocs/api/Profile#types","content":" "},{"title":"ProfileMetaData​","type":1,"pageTitle":"Profile","url":"/UniversalCraftwarsDocs/api/Profile#ProfileMetaData","content":"&lt;/&gt; interface ProfileMetaData { ProfileCreateTime: number-- Read-only SessionLoadCount: number-- Read-only ActiveSession: table?-- Read-only MetaTags: table-- Writable MetaTagsLatest: table-- Read-only }  "},{"title":"Properties​","type":1,"pageTitle":"Profile","url":"/UniversalCraftwarsDocs/api/Profile#properties","content":" "},{"title":"MetaData​","type":1,"pageTitle":"Profile","url":"/UniversalCraftwarsDocs/api/Profile#MetaData","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Profile.MetaData: ProfileMetaData Profile.MetaData is a table containing data about the profile itself Profile.MetaData.MetaTags is saved on the same DataStore key together with Profile.Data  "},{"title":"MetaTagsUpdated​","type":1,"pageTitle":"Profile","url":"/UniversalCraftwarsDocs/api/Profile#MetaTagsUpdated","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Profile.MetaTagsUpdated: RBXScriptSignal  A signal which fires every auto-save in which the profile has different Profile.MetaData.MetaTags. Uses a custom implementation of an RBXScriptSignal so some methods may not be available. Profile.MetaTagsUpdated will also fire when a profile is saved for the last time and released  "},{"title":"RobloxMetaData​","type":1,"pageTitle":"Profile","url":"/UniversalCraftwarsDocs/api/Profile#RobloxMetaData","content":"&lt;/&gt; Profile.RobloxMetaData: table  There are harsh limits for RobloxMetaData size, at the time of writing this RobloxMetaData cant exceed 300 characters. Similiar to setting the metadata in a DataStoreOptions instance, read the official documentation for more info  "},{"title":"UserIds​","type":1,"pageTitle":"Profile","url":"/UniversalCraftwarsDocs/api/Profile#UserIds","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Profile.UserIds: table User ids associated with this profile. Entries must be added with Profile:AddUserId() and removed with Profile:RemoveUserId().  "},{"title":"KeyInfo​","type":1,"pageTitle":"Profile","url":"/UniversalCraftwarsDocs/api/Profile#KeyInfo","content":"&lt;/&gt; Profile.KeyInfo: DataStoreKeyInfo  The DataStoreKeyInfo instance related to this profile.  "},{"title":"KeyInfoUpdated​","type":1,"pageTitle":"Profile","url":"/UniversalCraftwarsDocs/api/Profile#KeyInfoUpdated","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Profile.KeyInfoUpdated: RBXScriptSignal  A signal that gets triggered every time Profile.KeyInfo is updated with a new DataStoreKeyInfo instance reference after every auto-save or profile release. This uses a custom implementation of an RBXScriptSignal, so some methods may not be available.  "},{"title":"GlobalUpdates​","type":1,"pageTitle":"Profile","url":"/UniversalCraftwarsDocs/api/Profile#GlobalUpdates","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Profile.GlobalUpdates: global_updates This is the global_updates object tied to the specific Profile. It exposes methods for update processing. (See Global Updates for more info) "},{"title":"Functions​","type":1,"pageTitle":"Profile","url":"/UniversalCraftwarsDocs/api/Profile#functions","content":" "},{"title":"IsActive​","type":1,"pageTitle":"Profile","url":"/UniversalCraftwarsDocs/api/Profile#IsActive","content":"&lt;/&gt; Profile:IsActive() → boolean-- Whether the Profile is session-locked or not Returns true while the profile is session-locked and saving of changes to Profile.Data is guarenteed.  "},{"title":"GetMetaTag​","type":1,"pageTitle":"Profile","url":"/UniversalCraftwarsDocs/api/Profile#GetMetaTag","content":"&lt;/&gt; Profile:GetMetaTag( tag_name: string-- The name of the tag to retrieve ) → any-- The value associated with the requested tag Equivalent of Profile.MetaData.MetaTags[tag_name]. See Profile:SetMetaTag() for more info.  "},{"title":"Reconcile​","type":1,"pageTitle":"Profile","url":"/UniversalCraftwarsDocs/api/Profile#Reconcile","content":"&lt;/&gt; Profile:Reconcile() → nil Fills in missing variables inside Profile.Data from the profile_template that was provided when calling ProfileService.GetProfileStore(). It's often necessary to use :Reconcile() if you're applying changes to your profile_template over the course of your game's development after release. Read the API Documentation for more info  "},{"title":"ListenToRelease​","type":1,"pageTitle":"Profile","url":"/UniversalCraftwarsDocs/api/Profile#ListenToRelease","content":"&lt;/&gt; Profile:ListenToRelease( listener: () → ()-- A listener which is called when the profile is released ) → RBXScriptConnection -- A connection which can be used to disconnect the listener Listener functions subscribed to Profile:ListenToRelease() will be called when the profile is remotely released (Being ForceLoad'ed on a remote server) or locally (Profile:Release()). In common practice, the profile will rarely be released before the player leaves the game so it's recommended to simply :Kick() the Player when this happens. caution After Profile:ListenToRelease() is triggered, it is too late to change Profile.Data for the final time. As long as the profile is active (Profile:IsActive() == true), you should store all profile related data immediately after it becomes available.  "},{"title":"Release​","type":1,"pageTitle":"Profile","url":"/UniversalCraftwarsDocs/api/Profile#Release","content":"&lt;/&gt; Profile:Release() → nil Removes the session lock for this profile on the Roblox server. Call this method after you're done working with the Profile object. Profile data will be immediately saved for the last tiem.  "},{"title":"ListenToHopReady​","type":1,"pageTitle":"Profile","url":"/UniversalCraftwarsDocs/api/Profile#ListenToHopReady","content":"&lt;/&gt; Profile:ListenToHopReady( listener: () → ()-- The listener which is called when the profile has released it's session-lock ) → RBXScriptConnection -- The connection which can be used to disconnect the listener Profile:ListenToHopReady() is in many ways similiar to Profile:ListenToRelease() however, Profile:ListenToHopReady() is called when the session-lock on the profile is released. In most cases, this should be within a second, however, if a Profile is released next to an auto-update, it may take up to 7 seconds to be called. For more information on this method, visit the Profile Service API.  "},{"title":"AddUserId​","type":1,"pageTitle":"Profile","url":"/UniversalCraftwarsDocs/api/Profile#AddUserId","content":"&lt;/&gt; Profile:AddUserId( user_id: number-- The UserId to associate with the profile ) → nil Associates a UserId with the profile. Multiple users can be associated with a single profile by calling this method for each individual UserId. The primary use of this method is to comply with GDPR (The right to erasure).  "},{"title":"RemoveUserId​","type":1,"pageTitle":"Profile","url":"/UniversalCraftwarsDocs/api/Profile#RemoveUserId","content":"&lt;/&gt; Profile:RemoveUserId( user_id: number-- The UserId to remove from the DataStore ) → nil Unassociates UserId with the profile, if it was initially associated.  "},{"title":"Identify​","type":1,"pageTitle":"Profile","url":"/UniversalCraftwarsDocs/api/Profile#Identify","content":"&lt;/&gt; Profile:Identify() → string-- A string containing the Store, Scope, and Key Returns a string containing DataStore name, scope and key. Used for debugging. -- Example return: &quot;[Store:&quot;GameData&quot;;Scope:&quot;Live&quot;;Key:&quot;Player_2312310&quot;]&quot;   "},{"title":"SetMetaTag​","type":1,"pageTitle":"Profile","url":"/UniversalCraftwarsDocs/api/Profile#SetMetaTag","content":"&lt;/&gt; Profile:SetMetaTag( tag_name: string, value: any-- Any DataStore supported value, typically a primative ) → nil Equivalent of Profile.MetaData.MetaTags[tag_name] = value. Use for tagging your profile with information about itself such as: Profile:SetMetaTag(&quot;DataVersion&quot;, 1)to let your game know whether Profile.Data needs to be converted after massive changes to your game Anything set through Profile:SetMetaTag(tag_name, value) will be available through Profile.MetaData.MetaTagsLatest[tag_name] after an auto-save or a [:Save()](#Save) call - Profile.MetaData.MetaTagsLatestis a version ofProfile.MetaData.MetaTags``` that has been successfully saved to the DataStore.   "},{"title":"Save​","type":1,"pageTitle":"Profile","url":"/UniversalCraftwarsDocs/api/Profile#Save","content":"&lt;/&gt; Profile:Save() → nil Call Profile:Save() to quickly progress GlobalUpdates state or to speed up the progagation of Profile.MetaData.MetaTags changes to Profile.MetaData.MetaTagsLatest. Profile:Save() should not be called for saving Profile.Data or Profile.MetaData.MetaTags - this is already done for you automatically. caution Calling Profile:Save() when the Profile is released will throw an error. You can check Profile:IsActive() before using this method.  "},{"title":"ClearGlobalUpdates​","type":1,"pageTitle":"Profile","url":"/UniversalCraftwarsDocs/api/Profile#ClearGlobalUpdates","content":"&lt;/&gt; Profile:ClearGlobalUpdates() → nil  warning Only works on profiles loaded through ProfileStore:ViewProfileAsync() or ProfileStore:ProfileVersionQuery() Clears all global update data (active or locked) for a profile payload. It may be desirable to clear potential &quot;residue&quot; global updates (e.g. pending gifts) which were existing in a snapshot which is being used to recover player data throughProfileStore:ProfileVersionQuery()  "},{"title":"OverwriteAsync​","type":1,"pageTitle":"Profile","url":"/UniversalCraftwarsDocs/api/Profile#OverwriteAsync","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Profile:OverwriteAsync() → ()  warning Only works on profiles loaded through ProfileStore:ViewProfileAsync() or ProfileStore:ProfileVersionQuery() Only use for rollback payloads (Setting latest version to a copy of a previous version)! Using this method for editing latest player data when the player is in-game can lead to several minutes of lost progress - it should be replaced by :LoadProfileAsync which will wait for the next live profile auto-save if the player is in-game, allowing the remote server to release the profile and save latest data. Pushes the Profile payload to the DataStore (saves the profile) and releases the session lock for the profile. "},{"title":"DatastoreService","type":0,"sectionRef":"#","url":"/UniversalCraftwarsDocs/api/DatastoreService","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"DatastoreService","url":"/UniversalCraftwarsDocs/api/DatastoreService#functions","content":" "},{"title":"FilterInventory​","type":1,"pageTitle":"DatastoreService","url":"/UniversalCraftwarsDocs/api/DatastoreService#FilterInventory","content":"&lt;/&gt; DatastoreService.FilterInventory( Player: Player ,-- The player to filter the inventory for FilterParams: InventoryFilterParams-- The parameters used to filter the inventory ) → FilteredItemsList-- A filtered list of the inventory Filters through the players inventory based on parameters local FoundPlayer = game:GetService(&quot;Players&quot;):FindFirstChild(&quot;alexnewtron&quot;) if not FoundPlayer then return end local InventoryFilterParams = SharedCreators.InventoryFilterParams.new() local FilteredInventory = DatastoreService.FilterInventory(FoundPlayer, InventoryFilterParams) print(FilteredInventory) -- Filters alexnewtron's inventory   "},{"title":"SetStats​","type":1,"pageTitle":"DatastoreService","url":"/UniversalCraftwarsDocs/api/DatastoreService#SetStats","content":"&lt;/&gt; DatastoreService.SetStats( Player: Player -- The player to set the stats for ) → nil Actions code to a player who has just joined, such as leaderstats game.Players.PlayerAdded:Connect(function(Player) if Player:FindFirstChild(&quot;leaderstats&quot;) then return end -- DatastoreService.SetStats will only work once, and if they have leaderstats it's already been set DatastoreService.SetStats(Player) end) -- Sets the stats of any new player who joins assuming it hasnt already been set   "},{"title":"AddCash​","type":1,"pageTitle":"DatastoreService","url":"/UniversalCraftwarsDocs/api/DatastoreService#AddCash","content":"&lt;/&gt; DatastoreService:AddCash( Player: Player ,-- The player to give cash to Amount: number-- The amount of cash to give to the player ) → nil Gives a player an amount of cash for _, Player in game:GetService(&quot;Players&quot;):GetChildren() do DatastoreService:AddCash(Player, 200) end -- Give every Player 200 cash   "},{"title":"AddEXP​","type":1,"pageTitle":"DatastoreService","url":"/UniversalCraftwarsDocs/api/DatastoreService#AddEXP","content":"&lt;/&gt; DatastoreService:AddEXP( Player: Player -- The player to give EXP to ) → nil Adds the amount of EXP to a player, then runs DatastoreService:CheckEXP on the player for _, Player in game:GetService(&quot;Players&quot;):GetChildren() do if Player.Name == &quot;Shedletsky&quot; then DatastoreService:AddEXP(Player, 2006) end end -- Give Shedletsky 2006 EXP if he's in the server   "},{"title":"AddRank​","type":1,"pageTitle":"DatastoreService","url":"/UniversalCraftwarsDocs/api/DatastoreService#AddRank","content":"&lt;/&gt; DatastoreService:AddRank( Player: Player ,-- The player to give ranks to Amount: number-- The amount of ranks to give, negatives and 0 are supported ) → nil Adds a set amount of ranks to the player game.PlayerAdded:Connect(function(Player: Player) Player:AddRank(Player, Player.AccountAge) end) -- Give every player who joins the amount of ranks as their account age   "},{"title":"CalculateExpNeeded​","type":1,"pageTitle":"DatastoreService","url":"/UniversalCraftwarsDocs/api/DatastoreService#CalculateExpNeeded","content":"&lt;/&gt; DatastoreService:CalculateExpNeeded( Rank: number-- The rank used to calculate the amount of EXP needed ) → FilteredItemsList-- The amount of EXP needed for the next level+ Calculated the amount of EXP the player needs for another level local RankToCalculate = 23 local EXPNeededToLevelUp = DatastoreService:CalculateExpNeeded(RankToCalculate) print(&quot;You need &quot; .. EXPNeededToLevelUp .. &quot; EXP to level up from level &quot; .. RankToCalculate) -- Calculate how much EXP is needed to level up from rank 23   "},{"title":"CheckEXP​","type":1,"pageTitle":"DatastoreService","url":"/UniversalCraftwarsDocs/api/DatastoreService#CheckEXP","content":"&lt;/&gt; DatastoreService:CheckEXP( Player: Player -- The player to check the EXP of ) → nil Checks the players EXP to see if a rank needs to be added workspace.Part.Touched:Connect(function(Hit) local FoundPlayer = game:GetService(&quot;Players&quot;):GetPlayerFromCharacter(Hit.Parent) if FoundPlayer then DatastoreService:CheckEXP(FoundPlayer) end end) -- Checks the EXP of anyone who touches a part   "},{"title":"EquipItem​","type":1,"pageTitle":"DatastoreService","url":"/UniversalCraftwarsDocs/api/DatastoreService#EquipItem","content":"&lt;/&gt; DatastoreService:EquipItem( Player: Player ,-- The player to try equip the item to ItemId: Item-- The Item to try equip ) → ( boolean,-- Whether or not the item was equipped string?-- If the item was not equipped, a message as to why is returned ) Attemps to equip an item for the player local ChosenPlayer = game:GetService(&quot;Players&quot;):GetPlayers()[1] if not ChosenPlayer then return end DatastoreService:EquipItem(ChosenPlayer, 3) -- Equip item with ID 3 to the first player   "},{"title":"GetProfileData​","type":1,"pageTitle":"DatastoreService","url":"/UniversalCraftwarsDocs/api/DatastoreService#GetProfileData","content":"&lt;/&gt; DatastoreService:GetProfileData( Player: Player -- The player to get the data of ) → DataTemplate-- The data of the player Returns the data of a profile if that profile exists, or nil if it doesnt local Roblox = game:GetService(&quot;Players&quot;):FindFirstChild(&quot;Roblox&quot;) if Roblox and Roblox:IsA(&quot;Player&quot;) then local RobloxData = DatastoreService:GetProfileData(Roblox) if not RobloxData then print(&quot;Roblox has no data or it isn't loaded yet!&quot;) return end print(&quot;Roblox has: &quot; .. RobloxData.Cash .. &quot; cash!&quot;) end -- View Roblox's Cash value assuming he is in the server and has data loaded   "},{"title":"GiveItem​","type":1,"pageTitle":"DatastoreService","url":"/UniversalCraftwarsDocs/api/DatastoreService#GiveItem","content":"&lt;/&gt; DatastoreService:GiveItem( Player: Player ,-- The player to give the item to ItemId: Item,-- The chosen item to give to the player ExtraData: ExtraItemGiveData?-- Any extra data such as whether it was crafted or if it was from an admin ) → nil Gives the chosen player an item game:GetService(&quot;Players&quot;).PlayerAdded:Connect(function(Player) Player.Chatted:Connect(function(msg) local ChattedID = tonumber(msg) if ChattedID then DatastoreService:GiveItem(Player, ChattedID, {AdminSpawned = true}) end end) end) -- Every time a player chats if the message is an ID, give them that item   "},{"title":"GlobalUpdateProfile​","type":1,"pageTitle":"DatastoreService","url":"/UniversalCraftwarsDocs/api/DatastoreService#GlobalUpdateProfile","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; DatastoreService:GlobalUpdateProfile( ProfileKey: ProfileKey,-- The profile key of the player being updated NewData: DataTemplate-- The new data of the profile to update, does not need to be complete ) → nil Globally updates the chosen profile to a new set of data DatastoreService:GlobalUpdateProfile(&quot;builderman&quot;, {Cash = -131, Rank = 1000}) -- Attempt to globaly update buildermans Cash and Rank data caution Calling this function too much may cause issues with data! Please read the Profile Service Docs for more info!  "},{"title":"TakeItem​","type":1,"pageTitle":"DatastoreService","url":"/UniversalCraftwarsDocs/api/DatastoreService#TakeItem","content":"&lt;/&gt; DatastoreService:TakeItem( Player: Player ,-- The player to take the item from ItemId: Item,-- The chosen item to take from the player ExtraData: ExtraItemGiveData?-- Any extra data such as whether it was crafted or if it was from an admin ) → nil Takes an item from the chosen player for _, Player in game:GetService(&quot;Players&quot;):GetPlayers() do DatastoreService:TakeItem(Player, 1) print(&quot;Took Item of ID 1 from &quot; .. Player.Name) end -- Takes an Item with ID 1 from every player, and prints a message for each player   "},{"title":"UnequipItem​","type":1,"pageTitle":"DatastoreService","url":"/UniversalCraftwarsDocs/api/DatastoreService#UnequipItem","content":"&lt;/&gt; DatastoreService:UnequipItem( Player: Player ,-- The player to try unequip the item for ItemId: Item-- The Item to try unequip ) → ( boolean,-- Whether or not the item was unequipped string?-- If the item was not unequipped, a message as to why is returned ) Attemps to unequip an item for the player local PlayersList = game:GetService(&quot;Players&quot;):GetPlayers() local ChosenNumber = math.random(1, #PlayersList) local ChosenPlayer = PlayersList[ChosenNumber] DatastoreService:UnequipItem(ChosenPlayer, 2) -- Unequips Item of ID 2 from a random Player   "},{"title":"ViewProfile​","type":1,"pageTitle":"DatastoreService","url":"/UniversalCraftwarsDocs/api/DatastoreService#ViewProfile","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; DatastoreService:ViewProfile( ProfileKey: ProfileKey-- The username or userid of the player to view the profile of ) → DataTemplate-- The data of the profile being viewed Allows viewing a profile, even when the player is offline / on another server local DataFor1x1x1x1 = DatastoreService:ViewProfile(&quot;1x1x1x1&quot;) if not DataFor1x1x1x1 then print(&quot;1x1x1x1 has no data&quot;) return end print(&quot;1x1x1x1 is rank &quot; .. DataFor1x1x1x1.Rank) -- Checks the rank for user 1x1x1x1 info While this function does check for players in the server, its recommended to use DatastoreService:GetProfileData() if their existance is guarenteed. "},{"title":"Cmdr","type":0,"sectionRef":"#","url":"/UniversalCraftwarsDocs/api/Cmdr","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#types","content":" "},{"title":"bindableResource​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#bindableResource","content":"&lt;/&gt; type bindableResource = &quot;Chat&quot;  Frankly, I have no idea as to the purpose of this type, potentially for things like StarterGui:SetCore()?  "},{"title":"brickColor​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#brickColor","content":"&lt;/&gt; type brickColor = BrickColor  Represents a BrickColor DataType.  "},{"title":"brickColors​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#brickColors","content":"&lt;/&gt; type brickColors = {brickColor} Represents a group of BrickColors.  "},{"title":"color3​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#color3","content":"&lt;/&gt; type color3 = Color3  Represents a Color3 value, made up of a sequence of RGB values  "},{"title":"color3s​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#color3s","content":"&lt;/&gt; type color3s = {color3} Represents a group of Color3s, made up of sequences of RGB values  "},{"title":"hexColor3​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#hexColor3","content":"&lt;/&gt; type hexColor3 = string Represents a Hexadecimal Color Code, being similiar to a color3 just differently formatted  "},{"title":"hexColor3s​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#hexColor3s","content":"&lt;/&gt; type hexColor3s = {hexColor3} Represents a group of Hexadecimal Color Codes, being similiar to color3s just differently formatted  "},{"title":"command​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#command","content":"&lt;/&gt; type command = CmdrCommand Represents a command name that has been registered with the Cmdr registry  "},{"title":"commands​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#commands","content":"&lt;/&gt; type commands = {command} Represents a group of command names that have been registered with the Cmdr registry  "},{"title":"conditionFunction​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#conditionFunction","content":"&lt;/&gt; type conditionFunction = string A condition for a function, the only current option is startsWith, likely used to determine conditions for custom commands  "},{"title":"duration​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#duration","content":"&lt;/&gt; type duration = number A duration inputted with a format such as 5d for 5 days, which is then converted to a number  "},{"title":"durations​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#durations","content":"&lt;/&gt; type durations = {duration} A collection of durations inputted with formats such as 5d for 5 days, which are then converted to numbers  "},{"title":"json​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#json","content":"&lt;/&gt; type json = {[primative]: [primative]} A JSON decoded table which was inputed into the command bar in an encoded format  "},{"title":"mathOperator​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#mathOperator","content":"&lt;/&gt; type mathOperator = Operator Common math operators such as +, -, *, /, **, and %  "},{"title":"player​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#player","content":"&lt;/&gt; type player = Player  A player who is currently in the server, inputted by their name tip You can use . for it to use the executor, * for all players, ** for others, and ? for random  "},{"title":"players​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#players","content":"&lt;/&gt; type players = {player} A group of players who are in the server info Prefixing a player type with % will instead use the teamPlayers type  "},{"title":"playerId​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#playerId","content":"&lt;/&gt; type playerId = number Inputs a player by their full username, and returns their UserId tip You can use . for it to use the executor, * for all players, ** for others, and ? for random  "},{"title":"playerIds​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#playerIds","content":"&lt;/&gt; type playerIds = {playerId} A group of players UserIds info Prefixing with # will instead use a players UserId over name  "},{"title":"stringType​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#stringType","content":"&lt;/&gt; type stringType = string A string primative, due to conflicting with unrelated mentions of the string datatype this has been renamed from string to stringType tip You can surround a string which contains spaces with &quot; in order for it to take the whole string instead of just the first word  "},{"title":"numberType​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#numberType","content":"&lt;/&gt; type numberType = number A number primative, due to conflicting names with a primative type, it has been renamed from number to numberType  "},{"title":"integer​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#integer","content":"&lt;/&gt; type integer = number An integer, meaning a number which has no decimal portion  "},{"title":"positiveInteger​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#positiveInteger","content":"&lt;/&gt; type positiveInteger = number An integer which is greater than 0  "},{"title":"nonNegativeInteger​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#nonNegativeInteger","content":"&lt;/&gt; type nonNegativeInteger = number An integer which is greater than or equal to 0  "},{"title":"byte​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#byte","content":"&lt;/&gt; type byte = number A 16 bit number, being between 0 and 255  "},{"title":"digit​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#digit","content":"&lt;/&gt; type digit = number A single digit number, being between 0 and 9  "},{"title":"booleanType​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#booleanType","content":"&lt;/&gt; type booleanType = boolean A boolean value, containing either true or false, due to conflicting names with a commonly used primative, this has been renamed from boolean to booleanType info Other options than true and false can be inputed, being t, yes, y, on, enable, enabled, 1, and +, for true, and f, no, n, off, disable, disabled, 0, and - for false  "},{"title":"stringTypes​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#stringTypes","content":"&lt;/&gt; type stringTypes = {stringType} A group of string primatives, due to conflicting with unrelated mentions of the string datatype this has been renamed from strings to stringTypes  "},{"title":"numberTypes​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#numberTypes","content":"&lt;/&gt; type numberTypes = {numberType} A group of number primatives, due to conflicting names with a primative type, it has been renamed from numbers to numberTypes  "},{"title":"integers​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#integers","content":"&lt;/&gt; type integers = {integer} A group of integers, meaning numbers with no decimal portion  "},{"title":"positiveIntegers​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#positiveIntegers","content":"&lt;/&gt; type positiveIntegers = {positiveInteger} A group of integers which are greater than 0  "},{"title":"nonNegativeIntegers​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#nonNegativeIntegers","content":"&lt;/&gt; type nonNegativeIntegers = {nonNegativeInteger} A group of integers which are greater than or equal to 0  "},{"title":"bytes​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#bytes","content":"&lt;/&gt; type bytes = {byte} A group of 16 bit numbers, being between 0 and 255  "},{"title":"digits​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#digits","content":"&lt;/&gt; type digits = {digit} A group of single digit numbers, being between 0 and 9  "},{"title":"booleanTypes​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#booleanTypes","content":"&lt;/&gt; type booleanTypes = {booleanType} A group of boolean values, containing either true or false, due to conflicting names with a commonly used primative, this has been renamed from booleans to booleanTypes  "},{"title":"storedKey​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#storedKey","content":"&lt;/&gt; type storedKey = string A stored value within Cmdr info The string used to query for storedKey types must begin with either . $ or $.  "},{"title":"storedKeys​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#storedKeys","content":"&lt;/&gt; type storedKeys = {storedKey} A group of stored keys  "},{"title":"team​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#team","content":"&lt;/&gt; type team = Team  A team, identified by it's name  "},{"title":"teams​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#teams","content":"&lt;/&gt; type teams = {team} A group of teams, identified by names  "},{"title":"teamPlayers​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#teamPlayers","content":"&lt;/&gt; type teamPlayers = {Player } An array of the players within a team  "},{"title":"teamColor​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#teamColor","content":"&lt;/&gt; type teamColor = BrickColor  The BrickColor used in it's TeamColor property  "},{"title":"teamColors​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#teamColors","content":"&lt;/&gt; type teamColors = {teamColor} A group of BrickColors, used in the corresponding teams TeamColor  "},{"title":"typeType​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#typeType","content":"&lt;/&gt; type typeType = CmdrType A type used within Cmdr, the representing string is type, however to avoid conflicts typeType is used to define it  "},{"title":"typeTypes​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#typeTypes","content":"&lt;/&gt; type typeTypes = {typeType} A group of types used within Cmdr, typeTypes is used to represent the type as types may conflict  "},{"title":"url​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#url","content":"&lt;/&gt; type url = string A URL used to identify a website info The URL must begin with either https:// or http://  "},{"title":"urls​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#urls","content":"&lt;/&gt; type urls = {url} A group of URLs used to identify websites  "},{"title":"userInput​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#userInput","content":"&lt;/&gt; type userInput = UserInputType  An Enum.UserInputType representing a button press such as mouse click  "},{"title":"userInputs​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#userInputs","content":"&lt;/&gt; type userInputs = {userInput} A group of Enum.UserInputType representing button presses, such as mouse clicks  "},{"title":"vector3​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#vector3","content":"&lt;/&gt; type vector3 = Vector3  A 3-Dimensional Vector with an X, Y, and Z axis  "},{"title":"vector3s​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#vector3s","content":"&lt;/&gt; type vector3s = {vector3} A group of 3-Dimensional Vectors with X, Y, and Z axes  "},{"title":"vector2​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#vector2","content":"&lt;/&gt; type vector2 = Vector2  A 2-Dimensional Vector with an X and Y axis  "},{"title":"vector2s​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#vector2s","content":"&lt;/&gt; type vector2s = {vector2} A group of 2-Dimensional Vectors with X and Y axes  "},{"title":"unixtimestamp​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#unixtimestamp","content":"Custom &lt;/&gt; type unixtimestamp = DateTime A unix timestamp, which is converted into a DateTime  "},{"title":"unixtimestampmillis​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#unixtimestampmillis","content":"Custom &lt;/&gt; type unixtimestampmillis = DateTime A unix timestamp in milliseconds, converted into a DateTime object  "},{"title":"universaltime​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#universaltime","content":"Custom &lt;/&gt; type universaltime = DateTime A time provided in format (year)-(month)-(day)-(hour)-(minute)-(second)-(millisecond) and formatted as a Universal Time  "},{"title":"localtime​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#localtime","content":"Custom &lt;/&gt; type localtime = DateTime A time provided in (year)-(month)-(day)-(hour)-(minute)-(second)-(millisecond) format as a Local Time  "},{"title":"isodate​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#isodate","content":"Custom &lt;/&gt; type isodate = DateTime A time provided as an ISODate, (year)-(month)-(day)T(hour):(minute):(second)Z  "},{"title":"itemid​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#itemid","content":"Custom &lt;/&gt; type itemid = Item An itemid, despite the name a name is provided within the command bar which is then converted to an ID  "},{"title":"itemids​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#itemids","content":"Custom &lt;/&gt; type itemids = {itemid} A group of itemids, which are provided as names and coverted to IDs  "},{"title":"service​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#service","content":"Custom &lt;/&gt; type service = Service A Roblox service, such as ReplicatedStorage, ServerScriptService, etc.  "},{"title":"services​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#services","content":"Custom &lt;/&gt; type services = {service} A group of Roblox services such as ReplicatedStorage, ServerScriptService, etc. "}]