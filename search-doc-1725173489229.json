[{"title":"Intro To The Docs","type":0,"sectionRef":"#","url":"/UniversalCraftwarsDocs/docs/intro","content":"Intro To The Docs Heres some links to do with the docs: API DocsMore coming in future!","keywords":""},{"title":"SharedCreators","type":0,"sectionRef":"#","url":"/UniversalCraftwarsDocs/api/SharedCreators","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"SharedCreators","url":"/UniversalCraftwarsDocs/api/SharedCreators#functions","content":" "},{"title":"CraftingFilterParams.new​","type":1,"pageTitle":"SharedCreators","url":"/UniversalCraftwarsDocs/api/SharedCreators#CraftingFilterParams.new","content":"&lt;/&gt; SharedCreators.CraftingFilterParams.new() → CraftingFilterParams Creates a new CraftingFilterParams local NewCraftingFilterParams = SharedCreators.CraftingFilterParams.new() NewCraftingFilterParams.CraftingType = &quot;Furniture&quot; print(&quot;Current search: &quot; .. NewCraftingFilterParams.Search) -- Creates a new CraftingFilterParams then sets the CraftingType to Furniture and prints the Search   "},{"title":"InventoryFilterParams.new​","type":1,"pageTitle":"SharedCreators","url":"/UniversalCraftwarsDocs/api/SharedCreators#InventoryFilterParams.new","content":"&lt;/&gt; SharedCreators.InventoryFilterParams.new() → InventoryFilterParams Creates a new InventoryFilterparams local NewInventoryFilterParams = SharedCreators.InventoryFilterParams.new() NewInventoryFilterParams.PageNumber = 3 print(&quot;Current rarity: &quot; .. NewInventoryFilterParams.Rarity) -- Creates a new InventoryFilterParams then sets the PageNumber to 3 and prints the Rarity  "},{"title":"InventoryFilterParams","type":0,"sectionRef":"#","url":"/UniversalCraftwarsDocs/api/InventoryFilterParams","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"InventoryFilterParams","url":"/UniversalCraftwarsDocs/api/InventoryFilterParams#properties","content":" "},{"title":"Search​","type":1,"pageTitle":"InventoryFilterParams","url":"/UniversalCraftwarsDocs/api/InventoryFilterParams#Search","content":"&lt;/&gt; InventoryFilterParams.Search: string The string used to filter by item name  "},{"title":"ClassFilters​","type":1,"pageTitle":"InventoryFilterParams","url":"/UniversalCraftwarsDocs/api/InventoryFilterParams#ClassFilters","content":"&lt;/&gt; InventoryFilterParams.ClassFilters: {Class?} The classes used to filter items by  "},{"title":"RarityFilter​","type":1,"pageTitle":"InventoryFilterParams","url":"/UniversalCraftwarsDocs/api/InventoryFilterParams#RarityFilter","content":"&lt;/&gt; InventoryFilterParams.RarityFilter: Rarity The rarity used to filter items  "},{"title":"PageNumber​","type":1,"pageTitle":"InventoryFilterParams","url":"/UniversalCraftwarsDocs/api/InventoryFilterParams#PageNumber","content":"&lt;/&gt; InventoryFilterParams.PageNumber: number The page used to decide where to return once results are filtered  "},{"title":"SlotsPerPage​","type":1,"pageTitle":"InventoryFilterParams","url":"/UniversalCraftwarsDocs/api/InventoryFilterParams#SlotsPerPage","content":"&lt;/&gt; InventoryFilterParams.SlotsPerPage: number The amount of slots that are registered on the page, should always be 10 "},{"title":"CraftingFilterParams","type":0,"sectionRef":"#","url":"/UniversalCraftwarsDocs/api/CraftingFilterParams","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"CraftingFilterParams","url":"/UniversalCraftwarsDocs/api/CraftingFilterParams#properties","content":" "},{"title":"Search​","type":1,"pageTitle":"CraftingFilterParams","url":"/UniversalCraftwarsDocs/api/CraftingFilterParams#Search","content":"&lt;/&gt; CraftingFilterParams.Search: string The string used to filter by item name  "},{"title":"PageNumber​","type":1,"pageTitle":"CraftingFilterParams","url":"/UniversalCraftwarsDocs/api/CraftingFilterParams#PageNumber","content":"&lt;/&gt; CraftingFilterParams.PageNumber: number The page used to decide where to return once results are filtered  "},{"title":"SlotsPerPage​","type":1,"pageTitle":"CraftingFilterParams","url":"/UniversalCraftwarsDocs/api/CraftingFilterParams#SlotsPerPage","content":"&lt;/&gt; CraftingFilterParams.SlotsPerPage: number The amount of slots that are registered on the page, should always be 10  "},{"title":"CraftingType​","type":1,"pageTitle":"CraftingFilterParams","url":"/UniversalCraftwarsDocs/api/CraftingFilterParams#CraftingType","content":"&lt;/&gt; CraftingFilterParams.CraftingType: CraftingType The type of crafting recipe to filter by "},{"title":"DatastoreTemplateService","type":0,"sectionRef":"#","url":"/UniversalCraftwarsDocs/api/DatastoreTemplateService","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"DatastoreTemplateService","url":"/UniversalCraftwarsDocs/api/DatastoreTemplateService#types","content":" "},{"title":"DataTemplate​","type":1,"pageTitle":"DatastoreTemplateService","url":"/UniversalCraftwarsDocs/api/DatastoreTemplateService#DataTemplate","content":"&lt;/&gt; interface DataTemplate { Inventory: {InventoryItem}-- The players inventory Rank: number-- The players rank Cash: number-- The amount of cash the player has EXP: number-- The amount of EXP the player has EquippedItems: {Item}-- The items the player has equipped } The template which is used for profilestore generation and as a placeholder type for profile data "},{"title":"Functions​","type":1,"pageTitle":"DatastoreTemplateService","url":"/UniversalCraftwarsDocs/api/DatastoreTemplateService#functions","content":" "},{"title":"GetTemplate​","type":1,"pageTitle":"DatastoreTemplateService","url":"/UniversalCraftwarsDocs/api/DatastoreTemplateService#GetTemplate","content":"&lt;/&gt; DatastoreTemplateService:GetTemplate() → DataTemplate-- The template for data Returns the template for data local DataTemplate = DatastoreTemplateService:GetTemplate() for Key, Value in pairs(DataTemplate) do print(Key, Value) end -- Prints every Key and Value pair in the Data Template  "},{"title":"CustomTypes","type":0,"sectionRef":"#","url":"/UniversalCraftwarsDocs/api/CustomTypes","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"CustomTypes","url":"/UniversalCraftwarsDocs/api/CustomTypes#types","content":" "},{"title":"Class​","type":1,"pageTitle":"CustomTypes","url":"/UniversalCraftwarsDocs/api/CustomTypes#Class","content":"&lt;/&gt; type Class = &quot;Melee&quot; | &quot;Mage&quot; | &quot;Ranged&quot; | &quot;Summoner&quot; A class used to denote typically damage type local MeleeClass: Class = &quot;Melee&quot;   "},{"title":"CraftingType​","type":1,"pageTitle":"CustomTypes","url":"/UniversalCraftwarsDocs/api/CustomTypes#CraftingType","content":"&lt;/&gt; type CraftingType = &quot;Default&quot; | &quot;Furniture&quot; | &quot;Shop&quot; A type of crafting local CraftingTypes: {CraftingType} = { &quot;Default&quot;, &quot;Furniture&quot;, &quot;Shop&quot;, }   "},{"title":"ExtraItemGiveData​","type":1,"pageTitle":"CustomTypes","url":"/UniversalCraftwarsDocs/api/CustomTypes#ExtraItemGiveData","content":"&lt;/&gt; interface ExtraItemGiveData { Crafted: boolean?-- Whether or not the item was crafted AdminSpawned: boolean?-- Whether or not this item was from an admin ChatNotify: boolean? } Extra data about why or how an item was given / taken local ExtraGiveData: ExtraItemGiveData = { Crafted = true, AdminSpawned = false, ChatNotify = true, }   "},{"title":"FilteredItemsList​","type":1,"pageTitle":"CustomTypes","url":"/UniversalCraftwarsDocs/api/CustomTypes#FilteredItemsList","content":"&lt;/&gt; type FilteredItemsList = {InventoryItem} A filtered list of items, containing items based on the filter params used to generate it local FilteredInventory: FilteredItemsList = { {Id = 1, Count = 15}, {Id = 5, Count = 29}, {Id = 3, Count = 7}, }   "},{"title":"InventoryItem​","type":1,"pageTitle":"CustomTypes","url":"/UniversalCraftwarsDocs/api/CustomTypes#InventoryItem","content":"&lt;/&gt; interface InventoryItem { Id: Item-- The ID of the item this inventory slot refers to Count: number-- The amount of an item is in this slot } An item found within an inventory, containing an ID and amount local InventorySlotOne: InventoryItem = {Id = 10, Count = 24}   "},{"title":"Item​","type":1,"pageTitle":"CustomTypes","url":"/UniversalCraftwarsDocs/api/CustomTypes#Item","content":"&lt;/&gt; type Item = number An item by its ID local FirstItemID: Item = 1   "},{"title":"ProfileKey​","type":1,"pageTitle":"CustomTypes","url":"/UniversalCraftwarsDocs/api/CustomTypes#ProfileKey","content":"&lt;/&gt; type ProfileKey = string | number A ProfileKey for use in datastores, being either a players name or userid local ProfileKey: ProfileKey = &quot;builderman&quot;   "},{"title":"Rarity​","type":1,"pageTitle":"CustomTypes","url":"/UniversalCraftwarsDocs/api/CustomTypes#Rarity","content":"&lt;/&gt; type Rarity = &quot;Rare&quot; | &quot;None&quot; A rarity used to denote how rare an item is to aquire local RareRarity: Rarity = &quot;None&quot;  "},{"title":"BiomeHandler","type":0,"sectionRef":"#","url":"/UniversalCraftwarsDocs/api/BiomeHandler","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"BiomeHandler","url":"/UniversalCraftwarsDocs/api/BiomeHandler#types","content":" "},{"title":"Biome​","type":1,"pageTitle":"BiomeHandler","url":"/UniversalCraftwarsDocs/api/BiomeHandler#Biome","content":"&lt;/&gt; type Biome = &quot;Overworld&quot; | &quot;Snow&quot; | &quot;Flame&quot; | &quot;Nature&quot; | &quot;Starry&quot; A biome, typically used in the biome handler local BiomeToUse: Biome = &quot;Flame&quot; BiomeHandler:AdjustBiome(BiomeToUse)   "},{"title":"ExtraBiomeData​","type":1,"pageTitle":"BiomeHandler","url":"/UniversalCraftwarsDocs/api/BiomeHandler#ExtraBiomeData","content":"&lt;/&gt; interface ExtraBiomeData { Chance: number-- The chance of the biome occuring, in % Duration: number-- The duration of the biome, in seconds } The extra data for a Biome, including Chance and Duration local CurrentBiomeData: ExtraBiomeData = BiomeHandler.CurrentBiomeData print(&quot;The current biome has a duration of &quot; .. CurrentBiomeData.Duration .. &quot; seconds&quot;)  "},{"title":"Properties​","type":1,"pageTitle":"BiomeHandler","url":"/UniversalCraftwarsDocs/api/BiomeHandler#properties","content":" "},{"title":"BiomeChanged​","type":1,"pageTitle":"BiomeHandler","url":"/UniversalCraftwarsDocs/api/BiomeHandler#BiomeChanged","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; BiomeHandler.BiomeChanged: RBXScriptSignal  An RBXScriptSignal which fires when the biome is changed, passing the new Biome as an argument BiomeHandler.BiomeChanged:Connect(function(NewBiome: Biome) print(NewBiome) end)   "},{"title":"BiomeStartTick​","type":1,"pageTitle":"BiomeHandler","url":"/UniversalCraftwarsDocs/api/BiomeHandler#BiomeStartTick","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; BiomeHandler.BiomeStartTick: number The time the biome started according to tick() task.wait(5) print(&quot;The biome started at &quot; .. BiomeHandler.BiomeStartTick)   "},{"title":"CurrentBiome​","type":1,"pageTitle":"BiomeHandler","url":"/UniversalCraftwarsDocs/api/BiomeHandler#CurrentBiome","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; BiomeHandler.CurrentBiome: Biome The current Biome if BiomeHandler.CurrentBiome == &quot;Starry&quot; then print(&quot;It's starry tonight!&quot;) end   "},{"title":"CurrentBiomeData​","type":1,"pageTitle":"BiomeHandler","url":"/UniversalCraftwarsDocs/api/BiomeHandler#CurrentBiomeData","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; BiomeHandler.CurrentBiomeData: ExtraBiomeData The extra data about the current biome local CurrentBiomeData: ExtraBiomeData = BiomeHandler.CurrentBiomeData print(&quot;The current biome has a &quot; .. CurrentBiomeData.Chance .. &quot;% chance of occuring&quot;)   "},{"title":"EnableBiomeTick​","type":1,"pageTitle":"BiomeHandler","url":"/UniversalCraftwarsDocs/api/BiomeHandler#EnableBiomeTick","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; BiomeHandler.EnableBiomeTick: boolean Whether or not the game with attempt to change the biome while true do if not BiomeHandler.EnableBiomeTick then print(&quot;Biome tick is disabled!&quot;) else print(&quot;Biome tick is enabled!&quot;) end task.wait() end  "},{"title":"Functions​","type":1,"pageTitle":"BiomeHandler","url":"/UniversalCraftwarsDocs/api/BiomeHandler#functions","content":" "},{"title":"AdjustBiome​","type":1,"pageTitle":"BiomeHandler","url":"/UniversalCraftwarsDocs/api/BiomeHandler#AdjustBiome","content":"&lt;/&gt; BiomeHandler.AdjustBiome( BiomeName: Biome-- The biome to set to ) → nil Sets the current biome to the specified one task.wait(5) BiomeHandler.AdjustBiome(&quot;Snow&quot;) -- Changes the biome to snow 5 seconds after the game is run  "},{"title":"DatastoreService","type":0,"sectionRef":"#","url":"/UniversalCraftwarsDocs/api/DatastoreService","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"DatastoreService","url":"/UniversalCraftwarsDocs/api/DatastoreService#functions","content":" "},{"title":"FilterInventory​","type":1,"pageTitle":"DatastoreService","url":"/UniversalCraftwarsDocs/api/DatastoreService#FilterInventory","content":"&lt;/&gt; DatastoreService.FilterInventory( Player: Player ,-- The player to filter the inventory for FilterParams: InventoryFilterParams-- The parameters used to filter the inventory ) → FilteredItemsList-- A filtered list of the inventory Filters through the players inventory based on parameters local FoundPlayer = game:GetService(&quot;Players&quot;):FindFirstChild(&quot;alexnewtron&quot;) if not FoundPlayer then return end local InventoryFilterParams = SharedCreators.InventoryFilterParams.new() local FilteredInventory = DatastoreService.FilterInventory(FoundPlayer, InventoryFilterParams) print(FilteredInventory) -- Filters alexnewtron's inventory   "},{"title":"SetStats​","type":1,"pageTitle":"DatastoreService","url":"/UniversalCraftwarsDocs/api/DatastoreService#SetStats","content":"&lt;/&gt; DatastoreService.SetStats( Player: Player -- The player to set the stats for ) → nil Actions code to a player who has just joined, such as leaderstats game.Players.PlayerAdded:Connect(function(Player) if Player:FindFirstChild(&quot;leaderstats&quot;) then return end -- DatastoreService.SetStats will only work once, and if they have leaderstats it's already been set DatastoreService.SetStats(Player) end) -- Sets the stats of any new player who joins assuming it hasnt already been set   "},{"title":"AddCash​","type":1,"pageTitle":"DatastoreService","url":"/UniversalCraftwarsDocs/api/DatastoreService#AddCash","content":"&lt;/&gt; DatastoreService:AddCash( Player: Player ,-- The player to give cash to Amount: number-- The amount of cash to give to the player ) → nil Gives a player an amount of cash for _, Player in game:GetService(&quot;Players&quot;):GetChildren() do DatastoreService:AddCash(Player, 200) end -- Give every Player 200 cash   "},{"title":"AddEXP​","type":1,"pageTitle":"DatastoreService","url":"/UniversalCraftwarsDocs/api/DatastoreService#AddEXP","content":"&lt;/&gt; DatastoreService:AddEXP( Player: Player -- The player to give EXP to ) → nil Adds the amount of EXP to a player, then runs DatastoreService:CheckEXP on the player for _, Player in game:GetService(&quot;Players&quot;):GetChildren() do if Player.Name == &quot;Shedletsky&quot; then DatastoreService:AddEXP(Player, 2006) end end -- Give Shedletsky 2006 EXP if he's in the server   "},{"title":"AddRank​","type":1,"pageTitle":"DatastoreService","url":"/UniversalCraftwarsDocs/api/DatastoreService#AddRank","content":"&lt;/&gt; DatastoreService:AddRank( Player: Player ,-- The player to give ranks to Amount: number-- The amount of ranks to give, negatives and 0 are supported ) → nil Adds a set amount of ranks to the player game.PlayerAdded:Connect(function(Player: Player) Player:AddRank(Player, Player.AccountAge) end) -- Give every player who joins the amount of ranks as their account age   "},{"title":"CalculateExpNeeded​","type":1,"pageTitle":"DatastoreService","url":"/UniversalCraftwarsDocs/api/DatastoreService#CalculateExpNeeded","content":"&lt;/&gt; DatastoreService:CalculateExpNeeded( Rank: number-- The rank used to calculate the amount of EXP needed ) → FilteredItemsList-- The amount of EXP needed for the next level+ Calculated the amount of EXP the player needs for another level local RankToCalculate = 23 local EXPNeededToLevelUp = DatastoreService:CalculateExpNeeded(RankToCalculate) print(&quot;You need &quot; .. EXPNeededToLevelUp .. &quot; EXP to level up from level &quot; .. RankToCalculate) -- Calculate how much EXP is needed to level up from rank 23   "},{"title":"CheckEXP​","type":1,"pageTitle":"DatastoreService","url":"/UniversalCraftwarsDocs/api/DatastoreService#CheckEXP","content":"&lt;/&gt; DatastoreService:CheckEXP( Player: Player -- The player to check the EXP of ) → nil Checks the players EXP to see if a rank needs to be added workspace.Part.Touched:Connect(function(Hit) local FoundPlayer = game:GetService(&quot;Players&quot;):GetPlayerFromCharacter(Hit.Parent) if FoundPlayer then DatastoreService:CheckEXP(FoundPlayer) end end) -- Checks the EXP of anyone who touches a part   "},{"title":"EquipItem​","type":1,"pageTitle":"DatastoreService","url":"/UniversalCraftwarsDocs/api/DatastoreService#EquipItem","content":"&lt;/&gt; DatastoreService:EquipItem( Player: Player ,-- The player to try equip the item to ItemId: Item-- The Item to try equip ) → ( boolean,-- Whether or not the item was equipped string?-- If the item was not equipped, a message as to why is returned ) Attemps to equip an item for the player local ChosenPlayer = game:GetService(&quot;Players&quot;):GetPlayers()[1] if not ChosenPlayer then return end DatastoreService:EquipItem(ChosenPlayer, 3) -- Equip item with ID 3 to the first player   "},{"title":"GetProfileData​","type":1,"pageTitle":"DatastoreService","url":"/UniversalCraftwarsDocs/api/DatastoreService#GetProfileData","content":"&lt;/&gt; DatastoreService:GetProfileData( Player: Player -- The player to get the data of ) → DataTemplate-- The data of the player Returns the data of a profile if that profile exists, or nil if it doesnt local Roblox = game:GetService(&quot;Players&quot;):FindFirstChild(&quot;Roblox&quot;) if Roblox and Roblox:IsA(&quot;Player&quot;) then local RobloxData = DatastoreService:GetProfileData(Roblox) if not RobloxData then print(&quot;Roblox has no data or it isn't loaded yet!&quot;) return end print(&quot;Roblox has: &quot; .. RobloxData.Cash .. &quot; cash!&quot;) end -- View Roblox's Cash value assuming he is in the server and has data loaded   "},{"title":"GiveItem​","type":1,"pageTitle":"DatastoreService","url":"/UniversalCraftwarsDocs/api/DatastoreService#GiveItem","content":"&lt;/&gt; DatastoreService:GiveItem( Player: Player ,-- The player to give the item to ItemId: Item,-- The chosen item to give to the player ExtraData: ExtraItemGiveData?-- Any extra data such as whether it was crafted or if it was from an admin ) → nil Gives the chosen player an item game:GetService(&quot;Players&quot;).PlayerAdded:Connect(function(Player) Player.Chatted:Connect(function(msg) local ChattedID = tonumber(msg) if ChattedID then DatastoreService:GiveItem(Player, ChattedID, {AdminSpawned = true}) end end) end) -- Every time a player chats if the message is an ID, give them that item   "},{"title":"GlobalUpdateProfile​","type":1,"pageTitle":"DatastoreService","url":"/UniversalCraftwarsDocs/api/DatastoreService#GlobalUpdateProfile","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; DatastoreService:GlobalUpdateProfile( ProfileKey: ProfileKey,-- The profile key of the player being updated NewData: DataTemplate-- The new data of the profile to update, does not need to be complete ) → nil Globally updates the chosen profile to a new set of data DatastoreService:GlobalUpdateProfile(&quot;builderman&quot;, {Cash = -131, Rank = 1000}) -- Attempt to globaly update buildermans Cash and Rank data caution Calling this function too much may cause issues with data! Please read the Profile Service Docs for more info!  "},{"title":"TakeItem​","type":1,"pageTitle":"DatastoreService","url":"/UniversalCraftwarsDocs/api/DatastoreService#TakeItem","content":"&lt;/&gt; DatastoreService:TakeItem( Player: Player ,-- The player to take the item from ItemId: Item,-- The chosen item to take from the player ExtraData: ExtraItemGiveData?-- Any extra data such as whether it was crafted or if it was from an admin ) → nil Takes an item from the chosen player for _, Player in game:GetService(&quot;Players&quot;):GetPlayers() do DatastoreService:TakeItem(Player, 1) print(&quot;Took Item of ID 1 from &quot; .. Player.Name) end -- Takes an Item with ID 1 from every player, and prints a message for each player   "},{"title":"UnequipItem​","type":1,"pageTitle":"DatastoreService","url":"/UniversalCraftwarsDocs/api/DatastoreService#UnequipItem","content":"&lt;/&gt; DatastoreService:UnequipItem( Player: Player ,-- The player to try unequip the item for ItemId: Item-- The Item to try unequip ) → ( boolean,-- Whether or not the item was unequipped string?-- If the item was not unequipped, a message as to why is returned ) Attemps to unequip an item for the player local PlayersList = game:GetService(&quot;Players&quot;):GetPlayers() local ChosenNumber = math.random(1, #PlayersList) local ChosenPlayer = PlayersList[ChosenNumber] DatastoreService:UnequipItem(ChosenPlayer, 2) -- Unequips Item of ID 2 from a random Player   "},{"title":"ViewProfile​","type":1,"pageTitle":"DatastoreService","url":"/UniversalCraftwarsDocs/api/DatastoreService#ViewProfile","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; DatastoreService:ViewProfile( ProfileKey: ProfileKey-- The username or userid of the player to view the profile of ) → DataTemplate-- The data of the profile being viewed Allows viewing a profile, even when the player is offline / on another server local DataFor1x1x1x1 = DatastoreService:ViewProfile(&quot;1x1x1x1&quot;) if not DataFor1x1x1x1 then print(&quot;1x1x1x1 has no data&quot;) return end print(&quot;1x1x1x1 is rank &quot; .. DataFor1x1x1x1.Rank) -- Checks the rank for user 1x1x1x1 info While this function does check for players in the server, its recommended to use DatastoreService:GetProfileData() if their existance is guarenteed. "},{"title":"Cmdr","type":0,"sectionRef":"#","url":"/UniversalCraftwarsDocs/api/Cmdr","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#types","content":" "},{"title":"bindableResource​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#bindableResource","content":"&lt;/&gt; type bindableResource = &quot;Chat&quot;  Frankly, I have no idea as to the purpose of this type, potentially for things like StarterGui:SetCore()?  "},{"title":"brickColor​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#brickColor","content":"&lt;/&gt; type brickColor = BrickColor  Represents a BrickColor DataType.  "},{"title":"brickColors​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#brickColors","content":"&lt;/&gt; type brickColors = {brickColor} Represents a group of BrickColors.  "},{"title":"color3​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#color3","content":"&lt;/&gt; type color3 = Color3  Represents a Color3 value, made up of a sequence of RGB values  "},{"title":"color3s​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#color3s","content":"&lt;/&gt; type color3s = {color3} Represents a group of Color3s, made up of sequences of RGB values  "},{"title":"hexColor3​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#hexColor3","content":"&lt;/&gt; type hexColor3 = string Represents a Hexadecimal Color Code, being similiar to a color3 just differently formatted  "},{"title":"hexColor3s​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#hexColor3s","content":"&lt;/&gt; type hexColor3s = {hexColor3} Represents a group of Hexadecimal Color Codes, being similiar to color3s just differently formatted  "},{"title":"command​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#command","content":"&lt;/&gt; type command = CmdrCommand Represents a command name that has been registered with the Cmdr registry  "},{"title":"commands​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#commands","content":"&lt;/&gt; type commands = {command} Represents a group of command names that have been registered with the Cmdr registry  "},{"title":"conditionFunction​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#conditionFunction","content":"&lt;/&gt; type conditionFunction = string A condition for a function, the only current option is startsWith, likely used to determine conditions for custom commands  "},{"title":"duration​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#duration","content":"&lt;/&gt; type duration = number A duration inputted with a format such as 5d for 5 days, which is then converted to a number  "},{"title":"durations​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#durations","content":"&lt;/&gt; type durations = {duration} A collection of durations inputted with formats such as 5d for 5 days, which are then converted to numbers  "},{"title":"json​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#json","content":"&lt;/&gt; type json = {[primative]: [primative]} A JSON decoded table which was inputed into the command bar in an encoded format  "},{"title":"mathOperator​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#mathOperator","content":"&lt;/&gt; type mathOperator = Operator Common math operators such as +, -, *, /, **, and %  "},{"title":"player​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#player","content":"&lt;/&gt; type player = Player  A player who is currently in the server, inputted by their name tip You can use . for it to use the executor, * for all players, ** for others, and ? for random  "},{"title":"players​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#players","content":"&lt;/&gt; type players = {player} A group of players who are in the server info Prefixing a player type with % will instead use the teamPlayers type  "},{"title":"playerId​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#playerId","content":"&lt;/&gt; type playerId = number Inputs a player by their full username, and returns their UserId tip You can use . for it to use the executor, * for all players, ** for others, and ? for random  "},{"title":"playerIds​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#playerIds","content":"&lt;/&gt; type playerIds = {playerId} A group of players UserIds info Prefixing with # will instead use a players UserId over name  "},{"title":"stringType​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#stringType","content":"&lt;/&gt; type stringType = string A string primative, due to conflicting with unrelated mentions of the string datatype this has been renamed from string to stringType tip You can surround a string which contains spaces with &quot; in order for it to take the whole string instead of just the first word  "},{"title":"numberType​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#numberType","content":"&lt;/&gt; type numberType = number A number primative, due to conflicting names with a primative type, it has been renamed from number to numberType  "},{"title":"integer​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#integer","content":"&lt;/&gt; type integer = number An integer, meaning a number which has no decimal portion  "},{"title":"positiveInteger​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#positiveInteger","content":"&lt;/&gt; type positiveInteger = number An integer which is greater than 0  "},{"title":"nonNegativeInteger​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#nonNegativeInteger","content":"&lt;/&gt; type nonNegativeInteger = number An integer which is greater than or equal to 0  "},{"title":"byte​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#byte","content":"&lt;/&gt; type byte = number A 16 bit number, being between 0 and 255  "},{"title":"digit​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#digit","content":"&lt;/&gt; type digit = number A single digit number, being between 0 and 9  "},{"title":"booleanType​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#booleanType","content":"&lt;/&gt; type booleanType = boolean A boolean value, containing either true or false, due to conflicting names with a commonly used primative, this has been renamed from boolean to booleanType info Other options than true and false can be inputed, being t, yes, y, on, enable, enabled, 1, and +, for true, and f, no, n, off, disable, disabled, 0, and - for false  "},{"title":"stringTypes​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#stringTypes","content":"&lt;/&gt; type stringTypes = {stringType} A group of string primatives, due to conflicting with unrelated mentions of the string datatype this has been renamed from strings to stringTypes  "},{"title":"numberTypes​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#numberTypes","content":"&lt;/&gt; type numberTypes = {numberType} A group of number primatives, due to conflicting names with a primative type, it has been renamed from numbers to numberTypes  "},{"title":"integers​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#integers","content":"&lt;/&gt; type integers = {integer} A group of integers, meaning numbers with no decimal portion  "},{"title":"positiveIntegers​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#positiveIntegers","content":"&lt;/&gt; type positiveIntegers = {positiveInteger} A group of integers which are greater than 0  "},{"title":"nonNegativeIntegers​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#nonNegativeIntegers","content":"&lt;/&gt; type nonNegativeIntegers = {nonNegativeInteger} A group of integers which are greater than or equal to 0  "},{"title":"bytes​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#bytes","content":"&lt;/&gt; type bytes = {byte} A group of 16 bit numbers, being between 0 and 255  "},{"title":"digits​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#digits","content":"&lt;/&gt; type digits = {digit} A group of single digit numbers, being between 0 and 9  "},{"title":"booleanTypes​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#booleanTypes","content":"&lt;/&gt; type booleanTypes = {booleanType} A group of boolean values, containing either true or false, due to conflicting names with a commonly used primative, this has been renamed from booleans to booleanTypes  "},{"title":"storedKey​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#storedKey","content":"&lt;/&gt; type storedKey = string A stored value within Cmdr info The string used to query for storedKey types must begin with either . $ or $.  "},{"title":"storedKeys​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#storedKeys","content":"&lt;/&gt; type storedKeys = {storedKey} A group of stored keys  "},{"title":"team​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#team","content":"&lt;/&gt; type team = Team  A team, identified by it's name  "},{"title":"teams​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#teams","content":"&lt;/&gt; type teams = {team} A group of teams, identified by names  "},{"title":"teamPlayers​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#teamPlayers","content":"&lt;/&gt; type teamPlayers = {Player } An array of the players within a team  "},{"title":"teamColor​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#teamColor","content":"&lt;/&gt; type teamColor = BrickColor  The BrickColor used in it's TeamColor property  "},{"title":"teamColors​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#teamColors","content":"&lt;/&gt; type teamColors = {teamColor} A group of BrickColors, used in the corresponding teams TeamColor  "},{"title":"typeType​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#typeType","content":"&lt;/&gt; type typeType = CmdrType A type used within Cmdr, the representing string is type, however to avoid conflicts typeType is used to define it  "},{"title":"typeTypes​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#typeTypes","content":"&lt;/&gt; type typeTypes = {typeType} A group of types used within Cmdr, typeTypes is used to represent the type as types may conflict  "},{"title":"url​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#url","content":"&lt;/&gt; type url = string A URL used to identify a website info The URL must begin with either https:// or http://  "},{"title":"urls​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#urls","content":"&lt;/&gt; type urls = {url} A group of URLs used to identify websites  "},{"title":"userInput​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#userInput","content":"&lt;/&gt; type userInput = UserInputType  An Enum.UserInputType representing a button press such as mouse click  "},{"title":"userInputs​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#userInputs","content":"&lt;/&gt; type userInputs = {userInput} A group of Enum.UserInputType representing button presses, such as mouse clicks  "},{"title":"vector3​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#vector3","content":"&lt;/&gt; type vector3 = Vector3  A 3-Dimensional Vector with an X, Y, and Z axis  "},{"title":"vector3s​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#vector3s","content":"&lt;/&gt; type vector3s = {vector3} A group of 3-Dimensional Vectors with X, Y, and Z axes  "},{"title":"vector2​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#vector2","content":"&lt;/&gt; type vector2 = Vector2  A 2-Dimensional Vector with an X and Y axis  "},{"title":"vector2s​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#vector2s","content":"&lt;/&gt; type vector2s = {vector2} A group of 2-Dimensional Vectors with X and Y axes  "},{"title":"unixtimestamp​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#unixtimestamp","content":"Custom &lt;/&gt; type unixtimestamp = DateTime A unix timestamp, which is converted into a DateTime  "},{"title":"unixtimestampmillis​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#unixtimestampmillis","content":"Custom &lt;/&gt; type unixtimestampmillis = DateTime A unix timestamp in milliseconds, converted into a DateTime object  "},{"title":"universaltime​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#universaltime","content":"Custom &lt;/&gt; type universaltime = DateTime A time provided in format (year)-(month)-(day)-(hour)-(minute)-(second)-(millisecond) and formatted as a Universal Time  "},{"title":"localtime​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#localtime","content":"Custom &lt;/&gt; type localtime = DateTime A time provided in (year)-(month)-(day)-(hour)-(minute)-(second)-(millisecond) format as a Local Time  "},{"title":"isodate​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#isodate","content":"Custom &lt;/&gt; type isodate = DateTime A time provided as an ISODate, (year)-(month)-(day)T(hour):(minute):(second)Z  "},{"title":"itemid​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#itemid","content":"Custom &lt;/&gt; type itemid = Item An itemid, despite the name a name is provided within the command bar which is then converted to an ID  "},{"title":"itemids​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#itemids","content":"Custom &lt;/&gt; type itemids = {itemid} A group of itemids, which are provided as names and coverted to IDs  "},{"title":"service​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#service","content":"Custom &lt;/&gt; type service = Service A Roblox service, such as ReplicatedStorage, ServerScriptService, etc.  "},{"title":"services​","type":1,"pageTitle":"Cmdr","url":"/UniversalCraftwarsDocs/api/Cmdr#services","content":"Custom &lt;/&gt; type services = {service} A group of Roblox services such as ReplicatedStorage, ServerScriptService, etc. "}]